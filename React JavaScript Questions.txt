
  React JavaScript Questions :
  ==============================

   1. ReactJS - Home
   2. ReactJS - Introduction
   3. ReactJS - Installation
   4. ReactJS - Architecture
   5. ReactJS - Creating a React Application
   6. ReactJS - JSX
   7. ReactJS - Components
   8. ReactJS - Styling
   9. ReactJS - Properties (props)
  10. ReactJS - Event management
  11. ReactJS - State Management
  12. ReactJS - Http client programming
  13. ReactJS - Form programming
  14. ReactJS - Routing
  15. ReactJS - Redux
  16. ReactJS - Animation
  17. ReactJS - Testing
  18. ReactJS - CLI Commands
  19. ReactJS - Building and Deployment
  20. ReactJS - Example
  
  21. Practical Examples :

 1. <<<<<<<<< ReactJS - Home >>>>>>>>>
__________________________________________________
        ReactJS - Home                            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Home
                                                                                        
2) Definition of ReactJS - Home ?
---------------------------------
*
 
3) What is ReactJS - Home About ?
---------------------------------
*
*

4) What does ReactJS - Home Do ?
--------------------------------
*
*

5) Advantages/Benefits of ReactJS - Home :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Home :
---------------------------------------------
*
*
*  

7) Examples of ReactJS - Home :
-------------------------------
*
*
_______________________________________________________________________________

 2. <<<<<<<<< ReactJS - Introduction >>>>>>>>>

                 (A) React versions 
                 (B) Features
                 (C) Benefits
                 (D) Applications
__________________________________________________
     ReactJS - Introduction                       |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Introduction
                                                                                        
2) Definition of ReactJS - Introduction ?
-----------------------------------------
*
 
3) What is ReactJS - Introduction About ?
-----------------------------------------
*
*

4) What does ReactJS - Introduction Do ?
----------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Introduction :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Introduction :
-----------------------------------------------------
*
*
*  

7) Examples of ReactJS - Introduction :
---------------------------------------
*
*
_________________________________________________________________________________

   (A)  <<<<<<<<<   React versions   >>>>>>>>>
__________________________________________________
                                                  |
           React versions                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React versions
                                                                                        
2) Definition of React versions ?
---------------------------------
*
 
3) What is React versions About ?
---------------------------------
*
*

4) What does React versions Do ?
--------------------------------
*
*

5) Advantages/Benefits of React versions :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of React versions :
---------------------------------------------
*
*
*  

7) Examples of React versions :
-------------------------------
*
*
_________________________________________________________________________________

   (B)  <<<<<<<<<   Features   >>>>>>>>>
__________________________________________________
    Features                                      |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Features
                                                                                        
2) Definition of Features ?
---------------------------
*
 
3) What is Features About ?
---------------------------
*
*

4) What does Features Do ?
--------------------------
*
*

5) Advantages/Benefits of Features :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Features :
---------------------------------------
*
*
*  

7) Examples of Features :
-------------------------
*
*
_______________________________________________________________________________

   (C)  <<<<<<<<<   Benefits   >>>>>>>>>
__________________________________________________
    Benefits                                      |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Benefits
                                                                                        
2) Definition of Benefits ?
---------------------------
*
 
3) What is Benefits About ?
---------------------------
*
*

4) What does Benefits Do ?
--------------------------
*
*

5) Advantages/Benefits of Benefits :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Benefits :
---------------------------------------
*
*
*  

7) Examples of Benefits :
-------------------------
*
*
_______________________________________________________________________________

   (D)   <<<<<<<<<   Applications   >>>>>>>>>
__________________________________________________
   Applications                                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Applications
                                                                                        
2) Definition of Applications ?
-------------------------------
*
 
3) What is Applications About ?
-------------------------------
*
*

4) What does Applications Do ?
------------------------------
*
*

5) Advantages/Benefits of Applications :
----------------------------------------
*
*
*

6) Disadvantages/Drawback of Applications :
-------------------------------------------
*
*
*  

7) Examples of Applications :
-----------------------------
*
*
__________________________________________________________________________________
 3. <<<<<<<<< ReactJS - Installation >>>>>>>>>

                        (A) Toolchain
                        (B) The serve static server
                        (C) Babel compiler
                        (D) Create React App toolchain
                                * Updating the toolchain
                                * Advantages of using React toolchain
__________________________________________________
     ReactJS - Installation                       |
                                                  |        
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Installation
                                                                                        
2) Definition of ReactJS - Installation ?
-----------------------------------------
*
 
3) What is ReactJS - Installation About ?
-----------------------------------------
*
*

4) What does ReactJS - Installation Do ?
----------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Installation :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Installation :
-----------------------------------------------------
*
*
*  

7) Examples of ReactJS - Installation :
---------------------------------------
*
*
__________________________________________________________________________________

   (A)  <<<<<<<<<   Toolchain  >>>>>>>>>
__________________________________________________
     Toolchain                                    |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Toolchain
                                                                                        
2) Definition of Toolchain ?
----------------------------
*
 
3) What is Toolchain About ?
----------------------------
*
*

4) What does Toolchain Do ?
---------------------------
*
*

5) Advantages/Benefits of Toolchain :
-------------------------------------
*
*
*

6) Disadvantages/Drawback of Toolchain :
----------------------------------------
*
*
*  

7) Examples of Toolchain :
--------------------------
*
*
__________________________________________________________________________________

   (B)   <<<<<<<<<   The serve static server   >>>>>>>>>
__________________________________________________
                                                  |
           The serve static server                |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* The serve static server
                                                                                        
2) Definition of The serve static server ?
------------------------------------------
*
 
3) What is The serve static server About ?
------------------------------------------
*
*

4) What does The serve static server Do ?
-----------------------------------------
*
*

5) Advantages/Benefits of The serve static server :
---------------------------------------------------
*
*
*

6) Disadvantages/Drawback of The serve static server :
------------------------------------------------------
*
*
*  

7) Examples of The serve static server :
----------------------------------------
*
*
__________________________________________________________________________________

   (C)   <<<<<<<<<   Babel compiler   >>>>>>>>>
__________________________________________________
                                                  |
             Babel compiler                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Babel compiler
                                                                                        
2) Definition of Babel compiler ?
---------------------------------
*
 
3) What is Babel compiler About ?
---------------------------------
*
*

4) What does Babel compiler Do ?
--------------------------------
*
*

5) Advantages/Benefits of Babel compiler :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of Babel compiler :
---------------------------------------------
*
*
*  

7) Examples of Babel compiler :
-------------------------------
*
*
_______________________________________________________________________________

    (D)   <<<<<<<<<   Create React App toolchain   >>>>>>>>>
__________________________________________________
                                                  |
              Create React App toolchain          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Create React App toolchain
                                                                                        
2) Definition of Create React App toolchain ?
---------------------------------------------
*
 
3) What is Create React App toolchain About ?
---------------------------------------------
*
*

4) What does Create React App toolchain Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of Create React App toolchain :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Create React App toolchain :
---------------------------------------------------------
*
*
*  

7) Examples of Create React App toolchain :
-------------------------------------------
*
*
_________________________________________________________________________________

    *  <<<<<<<<<    Updating the toolchain   >>>>>>>>>
__________________________________________________
                                                  |
          Updating the toolchain                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Updating the toolchain
                                                                                        
2) Definition of Updating the toolchain ?
-----------------------------------------
*
 
3) What is Updating the toolchain About ?
-----------------------------------------
*
*

4) What does Updating the toolchain Do ?
----------------------------------------
*
*

5) Advantages/Benefits of Updating the toolchain :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Updating the toolchain :
-----------------------------------------------------
*
*
*  

7) Examples of Updating the toolchain :
---------------------------------------
*
*
__________________________________________________________________________________

   *   <<<<<<<<<    Advantages of using React toolchain   >>>>>>>>>
__________________________________________________
                                                  |
      Advantages of using React toolchain         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Advantages of using React toolchain
                                                                                        
2) Definition of Advantages of using React toolchain ?
------------------------------------------------------
*
 
3) What is Advantages of using React toolchain About ?
------------------------------------------------------
*
*

4) What does Advantages of using React toolchain Do ?
-----------------------------------------------------
*
*

5) Advantages/Benefits of Advantages of using React toolchain :
---------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Advantages of using React toolchain :
------------------------------------------------------------------
*
*
*  

7) Examples of Advantages of using React toolchain :
----------------------------------------------------
*
*
_________________________________________________________________________________

 4. <<<<<<<<< ReactJS - Architecture >>>>>>>>>
                           * React elements
                           * JSX 
                           * React Component
                           (A) Workflow of a React application
                                 * Example
                                 * Output
                           (B) React.createElement 
                           (C) ReactDOM.render
                           (D) Nested React element
                                 * Example
                                 * Output
                           (E) Use JSX Syntax
                           (F) Virtual DOM 
                           (G) Architecture of the React Application
__________________________________________________
     ReactJS - Architecture                       |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Architecture
                                                                                        
2) Definition of ReactJS - Architecture ?
-----------------------------------------
*
 
3) What is ReactJS - Architecture About ?
-----------------------------------------
*
*

4) What does ReactJS - Architecture Do ?
----------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Architecture :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Architecture :
-----------------------------------------------------
*
*
*  

7) Examples of ReactJS - Architecture :
---------------------------------------
*
*
__________________________________________________________________________________

   *  <<<<<<<<<    React elements    >>>>>>>>>
__________________________________________________
                                                  |
          React elements                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React elements
                                                                                        
2) Definition of React elements ?
---------------------------------
*
 
3) What is React elements About ?
---------------------------------
*
*

4) What does React elements Do ?
--------------------------------
*
*

5) Advantages/Benefits of React elements :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of React elements :
---------------------------------------------
*
*
*  

7) Examples of React elements :
-------------------------------
*
*
__________________________________________________________________________________

   *   <<<<<<<<<   JSX   >>>>>>>>>
__________________________________________________
     JSX                                          |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* JSX
                                                                                        
2) Definition of JSX ?
----------------------
*
 
3) What is JSX About ?
----------------------
*
*

4) What does JSX Do ?
---------------------
*
*

5) Advantages/Benefits of JSX :
-------------------------------
*
*
*

6) Disadvantages/Drawback of JSX :
----------------------------------
*
*
*  

7) Examples of JSX :
--------------------
*
*
_______________________________________________________________________________

   *    <<<<<<<<<   React Component   >>>>>>>>>
__________________________________________________
                                                  |
          React Component                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React Component
                                                                                        
2) Definition of React Component ?
----------------------------------
*
 
3) What is React Component About ?
----------------------------------
*
*

4) What does React Component Do ?
---------------------------------
*
*

5) Advantages/Benefits of React Component :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of React Component :
----------------------------------------------
*
*
*  

7) Examples of React Component :
--------------------------------
*
*
_________________________________________________________________________________

   (A)  <<<<<<<<<    Workflow of a React application    >>>>>>>>>
            
                                 * Example
                                 * Output
__________________________________________________
                                                  |
           Workflow of a React application        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Workflow of a React application
                                                                                        
2) Definition of Workflow of a React application ?
--------------------------------------------------
*
 
3) What is Workflow of a React application About ?
--------------------------------------------------
*
*

4) What does Workflow of a React application Do ?
-------------------------------------------------
*
*

5) Advantages/Benefits of Workflow of a React application :
-----------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Workflow of a React application :
--------------------------------------------------------------
*
*
*  

7) Examples of Workflow of a React application :
------------------------------------------------
*
*
__________________________________________________________________________________

   (B)  <<<<<<<<<   React.createElement   >>>>>>>>>
__________________________________________________
                                                  |
          React.createElement                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React.createElement
                                                                                        
2) Definition of React.createElement ?
--------------------------------------
*
 
3) What is React.createElement About ?
--------------------------------------
*
*

4) What does React.createElement Do ?
-------------------------------------
*
*

5) Advantages/Benefits of React.createElement :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of React.createElement :
--------------------------------------------------
*
*
*  

7) Examples of React.createElement :
------------------------------------
*
*
__________________________________________________________________________________

   (C)   <<<<<<<<<   ReactDOM.render   >>>>>>>>>
__________________________________________________
                                                  |
             ReactDOM.render                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactDOM.render
                                                                                        
2) Definition of ReactDOM.render ?
----------------------------------
*
 
3) What is ReactDOM.render About ?
----------------------------------
*
*

4) What does ReactDOM.render Do ?
---------------------------------
*
*

5) Advantages/Benefits of ReactDOM.render :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactDOM.render :
----------------------------------------------
*
*
*  

7) Examples of ReactDOM.render :
--------------------------------
*
*
__________________________________________________________________________________

   (D)   <<<<<<<<<   Nested React element   >>>>>>>>>

                                 * Example
                                 * Output
__________________________________________________
                                                  |
           Nested React element                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Nested React element
                                                                                        
2) Definition of Nested React element ?
---------------------------------------
*
 
3) What is Nested React element About ?
---------------------------------------
*
*

4) What does Nested React element Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Nested React element :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Nested React element :
---------------------------------------------------
*
*
*  

7) Examples of Nested React element :
-------------------------------------
*
*
__________________________________________________________________________________

   (F)  <<<<<<<<<   Use JSX Syntax   >>>>>>>>>
__________________________________________________
                                                  |
           Use JSX Syntax                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Use JSX Syntax
                                                                                        
2) Definition of Use JSX Syntax ?
---------------------------------
*
 
3) What is Use JSX Syntax About ?
---------------------------------
*
*

4) What does Use JSX Syntax Do ?
--------------------------------
*
*

5) Advantages/Benefits of Use JSX Syntax :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of Use JSX Syntax :
---------------------------------------------
*
*
*  

7) Examples of Use JSX Syntax :
-------------------------------
*
*
__________________________________________________________________________________

   (F)  <<<<<<<<<   Virtual DOM   >>>>>>>>>
__________________________________________________
                                                  |
           Virtual DOM                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Virtual DOM
                                                                                        
2) Definition of Virtual DOM ?
------------------------------
*
 
3) What is Virtual DOM About ?
------------------------------
*
*

4) What does Virtual DOM Do ?
-----------------------------
*
*

5) Advantages/Benefits of Virtual DOM :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of Virtual DOM :
------------------------------------------
*
*
*  

7) Examples of Virtual DOM :
----------------------------
*
*
__________________________________________________________________________________

   (G)  <<<<<<<<<    Architecture of the React Application    >>>>>>>>>
__________________________________________________
                                                  |
    Architecture of the React Application         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Architecture of the React Application
                                                                                        
2) Definition of Architecture of the React Application ?
--------------------------------------------------------
*
 
3) What is Architecture of the React Application About ?
--------------------------------------------------------
*
*

4) What does Architecture of the React Application Do ?
-------------------------------------------------------
*
*

5) Advantages/Benefits of Architecture of the React Application :
-----------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Architecture of the React Application :
--------------------------------------------------------------------
*
*
*  

7) Examples of Architecture of the React Application :
------------------------------------------------------
*
*
__________________________________________________________________________________

 5. <<<<<<<<< ReactJS - Creating a React Application >>>>>>>>>

                             (A) Using Rollup bundler
                             (B) Using Parcel bundler
__________________________________________________
      ReactJS - Creating a React Application      |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Creating a React Application
                                                                                        
2) Definition of ReactJS - Creating a React Application ?
---------------------------------------------------------
*
 
3) What is ReactJS - Creating a React Application About ?
---------------------------------------------------------
*
*

4) What does ReactJS - Creating a React Application Do ?
--------------------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Creating a React Application :
------------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Creating a React Application :
---------------------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Creating a React Application :
--------------------------------------------------------
*
*
_________________________________________________________________________________

   (A)  <<<<<<<<<   Using Rollup bundler   >>>>>>>>>
__________________________________________________
                                                  |
       Using Rollup bundler                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Using Rollup bundler
                                                                                        
2) Definition of Using Rollup bundler ?
---------------------------------------
*
 
3) What is Using Rollup bundler About ?
---------------------------------------
*
*

4) What does Using Rollup bundler Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Using Rollup bundler :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Using Rollup bundler :
---------------------------------------------------
*
*
*  

7) Examples of Using Rollup bundler :
-------------------------------------
*
*
__________________________________________________________________________________

   (B)  <<<<<<<<<    Using Parcel bundler    >>>>>>>>>
__________________________________________________
                                                  |
      Using Parcel bundler                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Using Parcel bundler                                                                                        
2) Definition of Using Parcel bundler ?
---------------------------------------
*
 
3) What is Using Parcel bundler About ?
---------------------------------------
*
*

4) What does Using Parcel bundler Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Using Parcel bundler :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Using Parcel bundler :
---------------------------------------------------
*
*
*  

7) Examples of Using Parcel bundler :
-------------------------------------
*
*
__________________________________________________________________________________


 6. <<<<<<<<< ReactJS - JSX >>>>>>>>>

                          (A) Expressions
                                 * Example
                                 * Output
                          (B) Functions
                                 * Example
                                 * Output
                          (C) Attributes
                                 * Example
                                 * Output
                          (D) Expression in attributes
__________________________________________________
      ReactJS - JSX                               |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - JSX
                                                                                        
2) Definition of ReactJS - JSX ?
--------------------------------
*
 
3) What is ReactJS - JSX About ?
--------------------------------
*
*

4) What does ReactJS - JSX Do ?
-------------------------------
*
*

5) Advantages/Benefits of ReactJS - JSX :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - JSX :
--------------------------------------------
*
*
*  

7) Examples of ReactJS - JSX :
------------------------------
*
*
__________________________________________________________________________________

   (A)   <<<<<<<<<   Expressions   >>>>>>>>>
            
                                 * Example
                                 * Output
__________________________________________________
                                                  |
            Expressions                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Expressions
                                                                                        
2) Definition of Expressions ?
------------------------------
*
 
3) What is Expressions About ?
------------------------------
*
*

4) What does Expressions Do ?
-----------------------------
*
*

5) Advantages/Benefits of Expressions :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of Expressions :
------------------------------------------
*
*
*  

7) Examples of Expressions :
----------------------------
*
*
_______________________________________________________________________________

   (B)   <<<<<<<<<    Functions   >>>>>>>>>
         
                                 * Example
                                 * Output
__________________________________________________
                                                  |
             Functions                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Functions
                                                                                        
2) Definition of Functions ?
----------------------------
*
 
3) What is Functions About ?
----------------------------
*
*

4) What does Functions Do ?
---------------------------
*
*

5) Advantages/Benefits of Functions :
-------------------------------------
*
*
*

6) Disadvantages/Drawback of Functions :
----------------------------------------
*
*
*  

7) Examples of Functions :
--------------------------
*
*
________________________________________________________________________________

    (C)   <<<<<<<<<    Attributes   >>>>>>>>>
            
                                 * Example
                                 * Output
__________________________________________________
                                                  |
             Attributes                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Attributes
                                                                                        
2) Definition of Attributes ?
-----------------------------
*
 
3) What is Attributes About ?
-----------------------------
*
*

4) What does Attributes Do ?
----------------------------
*
*

5) Advantages/Benefits of Attributes :
--------------------------------------
*
*
*

6) Disadvantages/Drawback of Attributes :
-----------------------------------------
*
*
*  

7) Examples of Attributes :
---------------------------
*
*
__________________________________________________________________________________

   (D)  <<<<<<<<<   Expression in attributes   >>>>>>>>>
__________________________________________________
                                                  |
            Expression in attributes              |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Expression in attributes
                                                                                        
2) Definition of Expression in attributes ?
-------------------------------------------
*
 
3) What is Expression in attributes About ?
-------------------------------------------
*
*

4) What does Expression in attributes Do ?
------------------------------------------
*
*

5) Advantages/Benefits of Expression in attributes :
----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Expression in attributes :
-------------------------------------------------------
*
*
*  

7) Examples of Expression in attributes :
-----------------------------------------
*
*
__________________________________________________________________________________


 7. <<<<<<<<< ReactJS - Components >>>>>>>>>

               (A) React component accomplish features using Three Concepts −
                                   1) Properties −
                                   2) Events − 
                                   3) State −
               (B) Creating a React component 
               (C) Creating a class component
                               * Example
                               * Output
               (D) Creating a function component
__________________________________________________
     ReactJS - Components                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Components
                                                                                        
2) Definition of ReactJS - Components ?
---------------------------------------
*
 
3) What is ReactJS - Components About ?
---------------------------------------
*
*

4) What does ReactJS - Components Do ?
--------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Components :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Components :
---------------------------------------------------
*
*
*  

7) Examples of ReactJS - Components :
-------------------------------------
*
*
_________________________________________________________________________________

       (A) React component accomplish features using Three Concepts −

   1)   <<<<<<<<<   Properties −    >>>>>>>>>
__________________________________________________
                                                  |
      Properties −                                |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Properties −
                                                                                        
2) Definition of Properties − ?
-------------------------------
*
 
3) What is Properties − About ?
-------------------------------
*
*

4) What does Properties − Do ?
------------------------------
*
*

5) Advantages/Benefits of Properties − :
----------------------------------------
*
*
*

6) Disadvantages/Drawback of Properties − :
-------------------------------------------
*
*
*  

7) Examples of Properties − :
-----------------------------
*
*
__________________________________________________________________________________

   2) <<<<<<<<< Events − >>>>>>>>>
__________________________________________________
                                                  |
         Events −                                 |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Events −
                                                                                        
2) Definition of Events − ?
---------------------------
*
 
3) What is Events − About ?
---------------------------
*
*

4) What does Events − Do ?
--------------------------
*
*

5) Advantages/Benefits of Events − :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Events − :
---------------------------------------
*
*
*  

7) Examples of Events − :
-------------------------
*
*
_________________________________________________________________________________

   3)   <<<<<<<<< State − >>>>>>>>>
__________________________________________________
          State −                                 |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* State −
                                                                                        
2) Definition of State − ?
--------------------------
*
 
3) What is State − About ?
--------------------------
*
*

4) What does State − Do ?
-------------------------
*
*

5) Advantages/Benefits of State − :
-----------------------------------
*
*
*

6) Disadvantages/Drawback of State − :
--------------------------------------
*
*
*  

7) Examples of State − :
------------------------
*
*
__________________________________________________________________________________

   (B)   <<<<<<<<<   Creating a React component   >>>>>>>>>
__________________________________________________
                                                  |
            Creating a React component            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Creating a React component
                                                                                        
2) Definition of Creating a React component ?
---------------------------------------------
*
 
3) What is Creating a React component About ?
---------------------------------------------
*
*

4) What does Creating a React component Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of Creating a React component :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Creating a React component :
---------------------------------------------------------
*
*
*  

7) Examples of Creating a React component :
-------------------------------------------
*
*
_________________________________________________________________________________

   (C)   <<<<<<<<< Creating a class component >>>>>>>>>
          
                               * Example
                               * Output
__________________________________________________
                                                  |
            Creating a class component            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Creating a class component
                                                                                        
2) Definition of Creating a class component ?
---------------------------------------------
*
 
3) What is Creating a class component About ?
---------------------------------------------
*
*

4) What does Creating a class component Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of Creating a class component :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Creating a class component :
---------------------------------------------------------
*
*
*  

7) Examples of Creating a class component :
-------------------------------------------
*
*
__________________________________________________________________________________

   (D)  <<<<<<<<<   Creating a function component   >>>>>>>>>
__________________________________________________
                                                  |
        Creating a function component             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Creating a function component
                                                                                        
2) Definition of Creating a function component ?
------------------------------------------------
*
 
3) What is Creating a function component About ?
------------------------------------------------
*
*

4) What does Creating a function component Do ?
-----------------------------------------------
*
*

5) Advantages/Benefits of Creating a function component :
---------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Creating a function component :
------------------------------------------------------------
*
*
*  

7) Examples of Creating a function component :
----------------------------------------------
*
*
_________________________________________________________________________________

 8. <<<<<<<<< ReactJS - Styling >>>>>>>>>

          'top options' are as follows −
                    1) CSS stylesheet −
                    2) Inline styling −
                    3) CSS Modules −
                    4) Styled component −
                    5) Sass stylesheet − 
                    6) Post processing stylesheet −

          three important methodology to style our component-
              (A) CSS Stylesheet
              (B) Inline Styling
              (C) CSS Modules
__________________________________________________
     ReactJS - Styling                            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Styling
                                                                                        
2) Definition of ReactJS - Styling ?
------------------------------------
*
 
3) What is ReactJS - Styling About ?
------------------------------------
*
*

4) What does ReactJS - Styling Do ?
-----------------------------------
*
*

5) Advantages/Benefits of ReactJS - Styling :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Styling :
------------------------------------------------
*
*
*  

7) Examples of ReactJS - Styling :
----------------------------------
*
*
__________________________________________________________________________________

      'top options' are as follows −

   1)  <<<<<<<<< CSS stylesheet − >>>>>>>>>
__________________________________________________
    CSS stylesheet −                              |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* CSS stylesheet −
                                                                                        
2) Definition of CSS stylesheet − ?
-----------------------------------
*
 
3) What is CSS stylesheet − About ?
-----------------------------------
*
*

4) What does CSS stylesheet − Do ?
----------------------------------
*
*

5) Advantages/Benefits of CSS stylesheet − :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of CSS stylesheet − :
-----------------------------------------------
*
*
*  

7) Examples of CSS stylesheet − :
---------------------------------
*
*
__________________________________________________________________________________

   2)   <<<<<<<<< Inline styling − >>>>>>>>>
__________________________________________________
                                                  |
           Inline styling −                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Inline styling −
                                                                                        
2) Definition of Inline styling − ?
-----------------------------------
*
 
3) What is Inline styling − About ?
-----------------------------------
*
*

4) What does Inline styling − Do ?
----------------------------------
*
*

5) Advantages/Benefits of Inline styling − :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of Inline styling − :
-----------------------------------------------
*
*
*  

7) Examples of Inline styling − :
---------------------------------
*
*
_________________________________________________________________________________

   3)   <<<<<<<<<   CSS Modules −   >>>>>>>>>
__________________________________________________
                                                  |
           CSS Modules −                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* CSS Modules −
                                                                                        
2) Definition of CSS Modules − ?
--------------------------------
*
 
3) What is CSS Modules − About ?
--------------------------------
*
*

4) What does CSS Modules − Do ?
-------------------------------
*
*

5) Advantages/Benefits of CSS Modules − :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of CSS Modules − :
--------------------------------------------
*
*
*  

7) Examples of CSS Modules − :
------------------------------
*
*
__________________________________________________________________________________

   4)   <<<<<<<<<   Styled component −   >>>>>>>>>
__________________________________________________
                                                  |
           Styled component −                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Styled component −
                                                                                        
2) Definition of Styled component − ?
-------------------------------------
*
 
3) What is Styled component − About ?
-------------------------------------
*
*

4) What does Styled component − Do ?
------------------------------------
*
*

5) Advantages/Benefits of Styled component − :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of Styled component − :
-------------------------------------------------
*
*
*  

7) Examples of Styled component − :
-----------------------------------
*
*
__________________________________________________________________________________

   5)   <<<<<<<<<   Sass stylesheet −   >>>>>>>>>
__________________________________________________
                                                  |
           Sass stylesheet −                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Sass stylesheet −
                                                                                        
2) Definition of Sass stylesheet − ?
------------------------------------
*
 
3) What is Sass stylesheet − About ?
------------------------------------
*
*

4) What does Sass stylesheet − Do ?
-----------------------------------
*
*

5) Advantages/Benefits of Sass stylesheet − :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of Sass stylesheet − :
------------------------------------------------
*
*
*  

7) Examples of Sass stylesheet − :
----------------------------------
*
*
__________________________________________________________________________________

    6)   <<<<<<<<<   Post processing stylesheet −   >>>>>>>>>
__________________________________________________
                                                  |
           Post processing stylesheet −           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Post processing stylesheet −
                                                                                        
2) Definition of Post processing stylesheet − ?
-----------------------------------------------
*
 
3) What is Post processing stylesheet − About ?
-----------------------------------------------
*
*

4) What does Post processing stylesheet − Do ?
----------------------------------------------
*
*

5) Advantages/Benefits of Post processing stylesheet − :
--------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Post processing stylesheet − :
-----------------------------------------------------------
*
*
*  

7) Examples of Post processing stylesheet − :
---------------------------------------------
*
*
__________________________________________________________________________________

      three important methodology to style our component-

   (A)   <<<<<<<<<  CSS Stylesheet  >>>>>>>>>
__________________________________________________
    CSS Stylesheet                                |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* CSS Stylesheet
                                                                                        
2) Definition of CSS Stylesheet ?
---------------------------------
*
 
3) What is CSS Stylesheet About ?
---------------------------------
*
*

4) What does CSS Stylesheet Do ?
--------------------------------
*
*

5) Advantages/Benefits of CSS Stylesheet :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of CSS Stylesheet :
---------------------------------------------
*
*
*  

7) Examples of CSS Stylesheet :
-------------------------------
*
*
__________________________________________________________________________________

   (B)   <<<<<<<<<    Inline Styling   >>>>>>>>>
__________________________________________________
                                                  |
           Inline Styling                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Inline Styling
                                                                                        
2) Definition of Inline Styling ?
---------------------------------
*
 
3) What is Inline Styling About ?
---------------------------------
*
*

4) What does Inline Styling Do ?
--------------------------------
*
*

5) Advantages/Benefits of Inline Styling :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of Inline Styling :
---------------------------------------------
*
*
*  

7) Examples of Inline Styling :
-------------------------------
*
*
_________________________________________________________________________________

   (C)   <<<<<<<<<   CSS Modules   >>>>>>>>>
__________________________________________________
                                                  |
            CSS Modules                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* CSS Modules
                                                                                        
2) Definition of CSS Modules ?
------------------------------
*
 
3) What is CSS Modules About ?
------------------------------
*
*

4) What does CSS Modules Do ?
-----------------------------
*
*

5) Advantages/Benefits of CSS Modules :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of CSS Modules :
------------------------------------------
*
*
*  

7) Examples of CSS Modules :
----------------------------
*
*
_________________________________________________________________________________

 9. <<<<<<<<< ReactJS - Properties (props) >>>>>>>>>
     
  React props support attribute’s value of different types. They are as follows,
             1) String
             2) Number
             3) Datetime 
             4) Array
             5) List
             6) Objects

    (A) Create a component using Properties
    (B) Nested Components
    (C) Use Component
    (D) Component Collection
__________________________________________________
     ReactJS - Properties (props)                 |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Properties (props)
                                                                                        
2) Definition of ReactJS - Properties (props) ?
-----------------------------------------------
*
 
3) What is ReactJS - Properties (props) About ?
-----------------------------------------------
*
*

4) What does ReactJS - Properties (props) Do ?
----------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Properties (props) :
--------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Properties (props) :
-----------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Properties (props) :
---------------------------------------------
*
*
_________________________________________________________________________________

  React props support attribute’s value of different types. They are as follows,

    1)   <<<<<<<<< String >>>>>>>>>
__________________________________________________
         String                                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* String
                                                                                        
2) Definition of String ?
-------------------------
*
 
3) What is String About ?
-------------------------
*
*

4) What does String Do ?
------------------------
*
*

5) Advantages/Benefits of String :
----------------------------------
*
*
*

6) Disadvantages/Drawback of String :
-------------------------------------
*
*
*  

7) Examples of String :
-----------------------
*
*
__________________________________________________________________________________

    2)   <<<<<<<<<   Number  >>>>>>>>>
__________________________________________________
   Number                                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Number
                                                                                        
2) Definition of Number ?
-------------------------
*
 
3) What is Number About ?
-------------------------
*
*

4) What does Number Do ?
------------------------
*
*

5) Advantages/Benefits of Number :
----------------------------------
*
*
*

6) Disadvantages/Drawback of Number :
-------------------------------------
*
*
*  

7) Examples of Number :
-----------------------
*
*
__________________________________________________________________________________

   3)   <<<<<<<<<   Datetime  >>>>>>>>>
__________________________________________________
                                                  |
           Datetime                               |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Datetime
                                                                                        
2) Definition of Datetime ?
---------------------------
*
 
3) What is Datetime About ?
---------------------------
*
*

4) What does Datetime Do ?
--------------------------
*
*

5) Advantages/Benefits of Datetime :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Datetime :
---------------------------------------
*
*
*  

7) Examples of Datetime :
-------------------------
*
*
_________________________________________________________________________________

   4)  <<<<<<<<<   Array   >>>>>>>>>
__________________________________________________
                                                  |
         Array                                    |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Array
                                                                                        
2) Definition of Array ?
------------------------
*
 
3) What is Array About ?
------------------------
*
*

4) What does Array Do ?
-----------------------
*
*

5) Advantages/Benefits of Array :
---------------------------------
*
*
*

6) Disadvantages/Drawback of Array :
------------------------------------
*
*
*  

7) Examples of Array :
----------------------
*
*
__________________________________________________________________________________

   5)   <<<<<<<<<   List   >>>>>>>>>
__________________________________________________
                                                  |
         List                                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* List
                                                                                        
2) Definition of List ?
-----------------------
*
 
3) What is List About ?
-----------------------
*
*

4) What does List Do ?
----------------------
*
*

5) Advantages/Benefits of List :
--------------------------------
*
*
*

6) Disadvantages/Drawback of List :
-----------------------------------
*
*
*  

7) Examples of List :
----------------------
*
*
_________________________________________________________________________________

   6)  <<<<<<<<< Objects >>>>>>>>>
__________________________________________________
        Objects                                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Objects
                                                                                        
2) Definition of Objects ?
--------------------------
*
 
3) What is Objects About ?
--------------------------
*
*

4) What does Objects Do ?
-------------------------
*
*

5) Advantages/Benefits of Objects :
-----------------------------------
*
*
*

6) Disadvantages/Drawback of Objects :
--------------------------------------
*
*
*  

7) Examples of Objects :
------------------------
*
*
________________________________________________________________________________

   (A)  <<<<<<<<< Create a component using Properties >>>>>>>>>
__________________________________________________
                                                  |
           Create a component using Properties    |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Create a component using Properties
                                                                                        
2) Definition of Create a component using Properties ?
------------------------------------------------------
*
 
3) What is Create a component using Properties About ?
------------------------------------------------------
*
*

4) What does Create a component using Properties Do ?
-----------------------------------------------------
*
*

5) Advantages/Benefits of Create a component using Properties :
---------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Create a component using Properties :
------------------------------------------------------------------
*
*
*  

7) Examples of Create a component using Properties :
----------------------------------------------------
*
*
_________________________________________________________________________________

   (B)  <<<<<<<<< Nested Components >>>>>>>>>
__________________________________________________
                                                  |
           Nested Components                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Nested Components
                                                                                        
2) Definition of Nested Components ?
------------------------------------
*
 
3) What is Nested Components About ?
------------------------------------
*
*

4) What does Nested Components Do ?
-----------------------------------
*
*

5) Advantages/Benefits of Nested Components :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of Nested Components :
------------------------------------------------
*
*
*  

7) Examples of Nested Components :
----------------------------------
*
*
_________________________________________________________________________________

   (C) <<<<<<<<<   Use Component  >>>>>>>>>
__________________________________________________
                                                  |
         Use Component                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Use Component
                                                                                        
2) Definition of Use Component ?
--------------------------------
*
 
3) What is Use Component About ?
--------------------------------
*
*

4) What does Use Component Do ?
-------------------------------
*
*

5) Advantages/Benefits of Use Component :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of Use Component :
--------------------------------------------
*
*
*  

7) Examples of Use Component :
------------------------------
*
*
__________________________________________________________________________________

   (D)  <<<<<<<<< Component Collection >>>>>>>>>
__________________________________________________
                                                  |
           Component Collection                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Component Collection
                                                                                        
2) Definition of Component Collection ?
---------------------------------------
*
 
3) What is Component Collection About ?
---------------------------------------
*
*

4) What does Component Collection Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Component Collection :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Component Collection :
---------------------------------------------------
*
*
*  

7) Examples of Component Collection :
-------------------------------------
*
*
__________________________________________________________________________________
        

 10. <<<<<<<<< ReactJS - Event management >>>>>>>>>
          
         step-by-step "process of handling an event in a React component",
       1) Define an event handler method to handle the given event :
                ______________________________________
               |  log() {                             |
               |     cosole.log("Event is fired");    |
               |  }                                   |
               |______________________________________|
         
     React provides an alternative syntax using lambda function to define event 
     handler,
           The lambda syntax is −
                _____________________________________
               |   log = () => {                     | 
               |      cosole.log("Event is fired");  | 
               |   }                                 |
               |_____________________________________|
 to know the target of the event, then add an argument "e" in the handler method.
 React will send the event target details to the handler method.
       2)    _____________________________________
            |   log(e) {                          |
            |      cosole.log("Event is fired");  |
            |      console.log(e.target);         |
            |   }                                 |
            |_____________________________________|

    The alternative lambda syntax is −
          _____________________________________
         |   log = (e) => {                    | 
         |      cosole.log("Event is fired");  |
         |      console.log(e.target);         |
         |   }                                 |
         |_____________________________________|

   If you want to send extra details during an event, then add the extra details
   as initial argument and then add argument (e) for event target,
       (3)
            ____________________________________
           |  log(extra, e) {                   |
           |     cosole.log("Event is fired");  |
           |     console.log(e.target);         |
           |     console.log(extra);            |
           |     console.log(this);             |
           |  }                                 |
           |____________________________________|

       The alternative lambda syntax is as follows −
        ______________________________________
       |   log = (extra, e) => {              |
       |      cosole.log("Event is fired");   |
       |      console.log(e.target);          |
       |      console.log(extra);             |
       |      console.log(this);              |
       |  }                                   |
       |______________________________________|

  Bind the event handler method in the constructor of the component. This will
  ensure the availability of this in the event handler method.
    (4)
           ______________________________________________________
          |   constructor(props) {                               |
          |      super(props);                                   |
          |      this.logContent = this.logContent.bind(this);   | 
          |   }                                                  |     
          |______________________________________________________| 

 * If the event handler is defined in alternate lambda syntax, then the binding is
   not needed.
 * this keyword will be automatically bound to the event handler method.
    * Set the event handler method for the specific event as specified below −
          _______________________________________________
         |  <div onClick={this.log}> ... </div>          |
         |_______________________________________________|
 * To set extra arguments, bind the event handler method and then pass the extra
   information as second argument.
      ___________________________________________________________
     |   <div onClick={this.log.bind(this, extra)}> ... </div>   |
     |___________________________________________________________|

       The alternate lambda syntax is as follows − 
      ____________________________________________________
     |   <div onClick={this.log(extra, e)}> ... </div>    | 
     |____________________________________________________| 
__________________________________________________
      ReactJS - Event management                  |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Event management
                                                                                        
2) Definition of ReactJS - Event management ?
---------------------------------------------
*
 
3) What is ReactJS - Event management About ?
---------------------------------------------
*
*

4) What does ReactJS - Event management Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Event management :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Event management :
---------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Event management :
-------------------------------------------
*
*
________________________________________________________________________________
        
 11. <<<<<<<<< ReactJS - State Management >>>>>>>>>
          (A)  What is state?
          (B)  The clock component :
                 The simple representation of the state is as follows −
                _____________________________________
               |   {                                 | 
               |   date: '2020-10-10 10:10:10'       |
               |   }                                 |
               |_____________________________________|
__________________________________________________
       ReactJS - State Management                 |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - State Management
                                                                                        
2) Definition of ReactJS - State Management ?
---------------------------------------------
*
 
3) What is ReactJS - State Management About ?
---------------------------------------------
*
*

4) What does ReactJS - State Management Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - State Management :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - State Management :
---------------------------------------------------------
*
*
*  

7) Examples of ReactJS - State Management :
-------------------------------------------
*
*
_________________________________________________________________________________

    (A)   <<<<<<<<< What is state? >>>>>>>>>
__________________________________________________
                                                  |
            What is state?                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* What is state?
                                                                                        
2) Definition of What is state? ?
---------------------------------
*
 
3) What is What is state? About ?
---------------------------------
*
*

4) What does What is state? Do ?
--------------------------------
*
*

5) Advantages/Benefits of What is state? :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of What is state? :
---------------------------------------------
*
*
*  

7) Examples of What is state? :
-------------------------------
*
*
_________________________________________________________________________________

   (B)  <<<<<<<<< The clock component :  >>>>>>>>>
__________________________________________________
                                                  |
         The clock component :                    |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* The clock component 
                                                                                        
2) Definition of The clock component ?
--------------------------------------
*
 
3) What is The clock component About ?
--------------------------------------
*
*

4) What does The clock component Do ?
-------------------------------------
*
*

5) Advantages/Benefits of The clock component :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of The clock component :
--------------------------------------------------
*
*
*  

7) Examples of The clock component :
------------------------------------
*
*
__________________________________________________________________________________

 12. <<<<<<<<< ReactJS - Http client programming >>>>>>>>>

       (A) Expense Rest Api Server :
             * Open a command prompt and create a new folder, express-rest-api :                           ___________________________
                       |   cd /go/to/workspace     |
                       |   mkdir apiserver         |
                       |   cd apiserver            |
                       |___________________________|

     (B)  Initialize a new node application using the below command −
                          _____________
                         |  npm init   |
                         |_____________|

     (C) npm init :
        * The npm init will prompt and ask us to enter basic project details.
        * Let us enter apiserver for project name and server.js for entry point.
        * Leave other configuration with default option.

   (D)  /// creating a package.json file. \\\
            ``````````````````````````````
   * This utility will walk you through creating a package.json file.
     It only covers the most common items, and tries to guess sensible defaults.

   * See `npm help json` for definitive documentation on these fields and exactly
     what they do.
   * Use `npm install <pkg>` afterwards to install a package and save it as a as
     as a dependency in the package.json file. 
   ___________________________________________________________________________
  |   Press ^C at any time to quit.                                           |
  |   package name: (apiserver)                                               | 
  |   version: (1.0.0)                                                        |
  |   description: Rest api for Expense Application                           |
  |   entry point: (index.js) server.js                                       |
  |   test command:                                                           |
  |   git repository:                                                         | 
  |   keywords:                                                               |
  |   author:                                                                 |
  |   license: (ISC)                                                          |
  |   About to write to \path\to\workspace\expense-rest-api\package.json:     |
  |   {                                                                       |
  |      "name": "expense-rest-api",                                          |
  |      "version": "1.0.0",                                                  |
  |      "description": "Rest api for Expense Application",                   |
  |      "main": "server.js",                                                 |
  |      "scripts": {                                                         | 
  |         "test": "echo \"Error: no test specified\" && exit 1"             |
  |      },                                                                   |
  |      "author": "",                                                        | 
  |      "license": "ISC"                                                     |
  |   }                                                                       |
  |   Is this OK? (yes) yes                                                   |
  |___________________________________________________________________________|

   (E)  Next, install express, nedb & cors modules using below command −
        ______________________________________
       |   npm install express nedb cors      |
       |______________________________________|
  * express is used to create server side application.
  * nedb is a datastore used to store the expense data.
  * cors is a middleware for express framework to configure the client access
    details.
  
 (F) create a file, data.csv, 

    Next, let us create a file, data.csv and populate it with initial expense
    data for testing purposes.
    The structure of the file is that it contains one expense entry per line.
      _____________________________________________________
     |   Pizza,80,2020-10-10,Food                          |
     |   Grape Juice,30,2020-10-12,Food                    |
     |   Cinema,210,2020-10-16,Entertainment               |
     |   Java Programming book,242,2020-10-15,Academic     | 
     |   Mango Juice,35,2020-10-16,Food                    |
     |   Dress,2000,2020-10-25,Cloth                       |
     |   Tour,2555,2020-10-29,Entertainment                | 
     |   Meals,300,2020-10-30,Food                         |
     |   Mobile,3500,2020-11-02,Gadgets                    |
     |   Exam Fees,1245,2020-11-04,Academic                |
     |_____________________________________________________|
   
 (G) Next, create a file expensedb.js ,

    Next, create a file expensedb.js and include code to load the initial Expense 
    Data store.
    The code checks the Data Store for initial Data and load only if the Data is 
    not available in the store.
   _____________________________________________________________________________
  |  var store = require("nedb")                                                | 
  |  var fs = require('fs');                                                    |
  |  var expenses = new store({ filename: "expense.db", autoload: true })       |
  |  expenses.find({}, function (err, docs) {                                   | 
  |     if (docs.length == 0) {                                                 |
  |        loadExpenses();                                                      |
  |     }                                                                       |
  |  })                                                                         |
  |  function loadExpenses() {                                                  |
  |     readCsv("data.csv", function (data) {                                   |
  |        console.log(data);                                                   |
  |                                                                             |
  |        data.forEach(function (rec, idx) {                                   |
  |           item = {}                                                         |
  |           item.name = rec[0];                                               |  
  |           item.amount = parseFloat(rec[1]);                                 |
  |           item.spend_date = new Date(rec[2]);                               |
  |           item.category = rec[3];                                           |
  |                                                                             |
  |           expenses.insert(item, function (err, doc) {                       |
  |              console.log('Inserted', doc.item_name, 'with ID', doc._id);    |
  |           })                                                                |
  |        })                                                                   |
  |    })                                                                       |
  |  }                                                                          |
  |  function readCsv(file, callback) {                                         |
  |     fs.readFile(file, 'utf-8', function (err, data) {                       |
  |        if (err) throw err;                                                  |
  |        var lines = data.split('\r\n');                                      | 
  |        var result = lines.map(function (line) {                             |
  |           return line.split(',');                                           |
  |        });                                                                  |
  |        callback(result);                                                    |
  |     });                                                                     |
  |  }                                                                          |
  |  module.exports = expenses                                                  |
  |_____________________________________________________________________________| 
    
  (H) Next, create a file, server.js , 

   Next, create a file, server.js and include the actual code to list, add, update
   and delete the expense entries.
  _______________________________________________________________________________
 |  var express = require("express")                                             |
 |  var cors = require('cors')                                                   |
 |  var expenseStore = require("./expensedb.js")                                 |
 |  var app = express()                                                          |
 |  app.use(cors());                                                             |
 |  var bodyParser = require("body-parser");                                     |
 |  app.use(bodyParser.urlencoded({ extended: false }));                         |
 |  app.use(bodyParser.json());                                                  |
 |  var HTTP_PORT = 8000                                                         |
 |  app.listen(HTTP_PORT, () => {                                                | 
 |     console.log("Server running on port %PORT%".replace("%PORT%", HTTP_PORT)) |
 |  });                                                                          |
 |  app.get("/", (req, res, next) => {                                           |
 |     res.json({ "message": "Ok" })                                             |
 |  });                                                                          |
 |  app.get("/api/expenses", (req, res, next) => {                               | 
 |     expenseStore.find({}, function (err, docs) {                              |
 |        res.json(docs);                                                        |
 |     });                                                                       |
 |  });                                                                          | 
 |  app.get("/api/expense/:id", (req, res, next) => {                            | 
 |     var id = req.params.id;                                                   |
 |     expenseStore.find({ _id: id }, function (err, docs) {                     |
 |        res.json(docs);                                                        |
 |     })                                                                        | 
 |  });                                                                          |
 |  app.post("/api/expense/", (req, res, next) => {                              | 
 |     var errors = []                                                           |
 |     if (!req.body.item) {                                                     | 
 |        errors.push("No item specified");                                      |
 |     }                                                                         |
 |     var data = {                                                              |
 |        name: req.body.name,                                                   |
 |        amount: req.body.amount,                                               |
 |        category: req.body.category,                                           |
 |        spend_date: req.body.spend_date,                                       |
 |     }                                                                         |
 |     expenseStore.insert(data, function (err, docs) {                          |
 |        return res.json(docs);                                                 |
 |     });                                                                       |
 |  })                                                                           |
 |  app.put("/api/expense/:id", (req, res, next) => {                            |
 |     var id = req.params.id;                                                   |
 |     var errors = []                                                           | 
 |     if (!req.body.item) {                                                     |
 |        errors.push("No item specified");                                      |
 |     }                                                                         |
 |     var data = {                                                              |
 |        _id: id,                                                               | 
 |        name: req.body.name,                                                   |  |                                                                               |
 |        amount: req.body.amount,                                               | 
 |        category: req.body.category,                                           |
 |        spend_date: req.body.spend_date,                                       |
 |     }                                                                         |
 |     expenseStore.update( { _id: id }, data, function (err, docs) {            |
 |        return res.json(data);                                                 |
 |     });                                                                       |
 |  })                                                                           |
 |  app.delete("/api/expense/:id", (req, res, next) => {                         |
 |     var id = req.params.id;                                                   |
 |     expenseStore.remove({ _id: id }, function (err, numDeleted) {             |
 |        res.json({ "message": "deleted" })                                     |
 |     });                                                                       |
 |  })                                                                           |
 |  app.use(function (req, res) {                                                |
 |     res.status(404);                                                          |
 |  });                                                                          |
 |_______________________________________________________________________________|
 
  (I) Now, it is time to run the application, 
           _________________________
          |   npm run start         |
          |_________________________|

  (J)  Next, open a browser and enter http://localhost:8000/ in the address bar,
                  ____________________________
                 |   {                        |
                 |   "message": "Ok"          |
                 |   }                        |
                 |____________________________|

   It confirms that our application is working fine.

  (K) change the url to http://localhost:8000/api/expense and press enter
   
   Finally, change the url to http://localhost:8000/api/expense and press enter.
   The browser will show the initial expense entries in JSON format.
          ______________________________________________________
         |   [                                                  |
         |      ...                                             |
         |      {                                               |
         |         "name": "Pizza",                             |
         |         "amount": 80,                                |
         |         "spend_date": "2020-10-10T00:00:00.000Z",    |
         |         "category": "Food",                          |
         |         "_id": "5H8rK8lLGJPVZ3gD"                    |
         |      },                                              |
         |      ...                                             |
         |   ]                                                  |
         |______________________________________________________| 

   Let us use our newly created expense server in our Expense manager application
   through fetch() api in the upcoming section.
   
   (L) The fetch() api :
       ````````````````` 
  * Let us create a new application to showcase client side programming in React. 
  * First, create a new react application, react-http-app using "Create React App"
    or "Rollup" bundler by following instruction in Creating a React application 
    chapter.
  * Next, open the application in your favorite editor.
  * Next, create "src" folder under the root directory of the application.
  * Next, create components folder under src folder.
  * Next, create a file,  "ExpenseEntryItemList.css"   under "src/components" 
    folder and include generic table styles.
      _________________________________________________________
     |   html {                                                | 
     |      font-family: sans-serif;                           |
     |   }                                                     |
     |   table {                                               |
     |      border-collapse: collapse;                         |
     |      border: 2px solid rgb(200,200,200);                | 
     |      letter-spacing: 1px;                               |
     |      font-size: 0.8rem;                                 |
     |   }                                                     |
     |   td, th {                                              |
     |      border: 1px solid rgb(190,190,190);                |
     |      padding: 10px 20px;                                |
     |   }                                                     |
     |   th {                                                  |
     |      background-color: rgb(235,235,235);                |
     |   }                                                     | 
     |   td, th {                                              |
     |      text-align: left;                                  |
     |   }                                                     |
     |   tr:nth-child(even) td {                               | 
     |      background-color: rgb(250,250,250);                |
     |   }                                                     |
     |   tr:nth-child(odd) td {                                |
     |      background-color: rgb(245,245,245);                |
     |   }                                                     |
     |   caption {                                             |
     |      padding: 10px;                                     |
     |   }                                                     |
     |   tr.highlight td {                                     |
     |       background-color: #a6a8bd;                        | 
     |   }                                                     |
     |_________________________________________________________|
    
  * Next, create a file, "ExpenseEntryItemList.js" under src/components folder and
     start editing.  
  * Next, import React library.
        ________________________________
       |  import React from 'react';    |
       |________________________________|
   
  * Next, create a class, ExpenseEntryItemList and call constructor with props.
            ___________________________________________________________
           |   class ExpenseEntryItemList extends React.Component {    |
           |      constructor(props) {                                 |
           |         super(props);                                     |
           |      }                                                    |
           |   }                                                       |
           |___________________________________________________________| 

  * Next, initialize the state with empty list in the constructor.
       ________________________________
      |  this.state = {                |
      |     isLoaded: false,           |  
      |     items: []                  |
      |  }                             |
      |________________________________|

   * Next, create a method, "setItems" to format the items received from
     remote server and then set it into the state of the component.
      ____________________________________________________
     |   setItems(remoteItems) {                          |
     |      var items = [];                               |
     |      remoteItems.forEach((item) => {               |
     |         let newItem = {                            | 
     |            id: item._id,                           |
     |            name: item.name,                        | 
     |            amount: item.amount,                    |
     |            spendDate: item.spend_date,             |
     |            category: item.category                 |
     |         }                                          |
     |         items.push(newItem)                        |
     |      });                                           |
     |      this.setState({                               |
     |         isLoaded: true,                            |
     |         items: items                               |
     |      });                                           |
     |   }                                                | 
     |____________________________________________________| 

  * Next, add a method, fetchRemoteItems to fetch the items from the server.
         _______________________________________________________
        |   fetchRemoteItems() {                                | 
        |      fetch("http://localhost:8000/api/expenses")      |
        |         .then(res => res.json())                      |
        |         .then(                                        | 
        |            (result) => {                              |
        |               this.setItems(result);                  |
        |            },                                         | 
        |            (error) => {                               |
        |               this.setState({                         |
        |                  isLoaded: false,                     |
        |                  error                                |
        |               });                                     |
        |            }                                          |
        |         )                                             |
        |   }                                                   | 
        |_______________________________________________________|
     Here,

           1) fetch api is used to fetch the item from the remote server.

           2) setItems is used to format and store the items in the state.

 * Next, add a method, deleteRemoteItem to delete the item from the remote server,
   ______________________________________________________________________________
  |  deleteRemoteItem(id) {                                                      |
  |     fetch('http://localhost:8000/api/expense/' + id, { method: 'DELETE' })   |
  |        .then(res => res.json())                                              |
  |        .then(                                                                |
  |           () => {                                                            |
  |              this.fetchRemoteItems()                                         |
  |           }                                                                  |
  |        )                                                                     |
  |  }                                                                           |
  |______________________________________________________________________________|
    Here,

        1) fetch api is used to delete and fetch the item from the remote server.

        2) setItems is again used to format and store the items in the state.
             
  * Next, call the "componentDidMount" life cycle api to load the items into the
    component during its mounting phase.   
            _____________________________________
           |  componentDidMount() {              |
           |     this.fetchRemoteItems();        |
           |  }                                  |
           |_____________________________________|

  * Next, write an event handler to remove the item from the list,
           ___________________________________________
          |  handleDelete = (id, e) => {              | 
          |     e.preventDefault();                   |
          |     console.log(id);                      |
          |                                           |
          |     this.deleteRemoteItem(id);            |
          |  }                                        |
          |___________________________________________|

  * Next, write the render method, 
 ______________________________________________________________________________
| render() {                                                                   |
|    let lists = [];                                                           |
|    if (this.state.isLoaded) {                                                |
|       lists = this.state.items.map((item) =>                                 |
|       <tr key={item.id} onMouseEnter={this.handleMouseEnter} onMouseLeave=   |
|               {this.handleMouseLeave}>                                       |
|          <td>{item.name}</td>                                                |
|          <td>{item.amount}</td>                                              |
|          <td>{new Date(item.spendDate).toDateString()}</td>                  | 
|          <td>{item.category}</td>                                            |
|          <td><a href="#" onClick={(e) => this.handleDelete(item.id, e)}      |
|                                          >Remove</a></td>                    |
|       </tr>                                                                  |
|      );                                                                      | 
|    }                                                                         |
|    return (                                                                  |
|       <div>                                                                  |
|          <table onMouseOver={this.handleMouseOver}>                          |
|             <thead>                                                          |
|                <tr>                                                          |
|                   <th>Item</th>                                              |
|                   <th>Amount</th>                                            | 
|                   <th>Date</th>                                              |
|                   <th>Category</th>                                          |
|                   <th>Remove</th>                                            |
|               </tr>                                                          |
|            </thead>                                                          |
|            <tbody>                                                           |
|               {lists}                                                        |
|            </tbody>                                                          |
|         </table>                                                             |
|      </div>                                                                  |
|   );                                                                         |
| }                                                                            |
|______________________________________________________________________________|

  *  Finally, export the component , 
    __________________________________________
   |   export default ExpenseEntryItemList;   |
   |__________________________________________|
  
              * Next, create a file, index.js under the src folder and use
                ExpenseEntryItemList component. 
      __________________________________________________________________________
     |  import React from 'react';                                              |
     |  import ReactDOM from 'react-dom';                                       | 
     |  import ExpenseEntryItemList from './components/ExpenseEntryItemList';   |
     |                                                                          |
     |  ReactDOM.render(                                                        |
     |     <React.StrictMode>                                                   |
     |           <ExpenseEntryItemList />                                       |
     |     </React.StrictMode>,                                                 |
     |     document.getElementById('root')                                      |
     |  );                                                                      |
     |__________________________________________________________________________| 
 
          * Finally, create a public folder under the root folder and create 
            index.html file. 
      _____________________________________________________________________
     |  <!DOCTYPE html>                                                    |
     |  <html lang="en">                                                   |
     |     <head>                                                          |
     |        <meta charset="utf-8">                                       |
     |        <title>React App</title>                                     |
     |     </head>                                                         |
     |     <body>                                                          |
     |        <div id="root"></div>                                        | 
     |        <script type="text/JavaScript" src="./index.js"></script>    |
     |     </body>                                                         |
     |  </html>                                                            |
     |_____________________________________________________________________|
 
   * Next, open a new terminal window and start our server application ,
            __________________________________________
           |  cd /go/to/server/application            |
           |  npm start                               |
           |__________________________________________|

   * Next, serve the client application using npm command ,
             __________________
            |  npm start       |
            |__________________|
   
   * Next, open the browser and enter http://localhost:3000 in the address bar
     and press enter.

   * Try to remove the item by clicking the remove link.
__________________________________________________
     ReactJS - Http client programming            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Http client programming
                                                                                        
2) Definition of ReactJS - Http client programming ?
----------------------------------------------------
*
 
3) What is ReactJS - Http client programming About ?
----------------------------------------------------
*
*

4) What does ReactJS - Http client programming Do ?
---------------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Http client programming :
-------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Http client programming :
----------------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Http client programming :
--------------------------------------------------
*
*
__________________________________________________________________________________

   (A)  <<<<<<<<<  Expense Rest Api Server :  >>>>>>>>>
__________________________________________________
                                                  |
          Expense Rest Api Server :               |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Expense Rest Api Server :
                                                                                        
2) Definition of Expense Rest Api Server ?
------------------------------------------
*
 
3) What is Expense Rest Api Server About ?
------------------------------------------
*
*

4) What does Expense Rest Api Server Do ?
-----------------------------------------
*
*

5) Advantages/Benefits of Expense Rest Api Server :
---------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Expense Rest Api Server :
------------------------------------------------------
*
*
*  

7) Examples of Expense Rest Api Server :
----------------------------------------
*
*
__________________________________________________________________________________

 (B)  <<<<<< Initialize a new node application using the below command − >>>>>>
________________________________________________________________
                                                                |
  Initialize a new node application using the below command −   |                  
________________________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Initialize a new node application using the below command −
                                                                                        
2) Definition of Initialize a new node application using the below command − ?
------------------------------------------------------------------------------
*
 
3) What is Initialize a new node application using the below command − About ?
------------------------------------------------------------------------------
*
*

4) What does Initialize a new node application using the below command − Do ?
-----------------------------------------------------------------------------
*
*

5) Advantages/Benefits of Initialize a new node application using the below command − :
---------------------------------
*
*
*

6) Disadvantages/Drawback of Initialize a new node application using the below command − :
------------------------------------
*
*
*  

7) Examples of Initialize a new node application using the below command − :
----------------------------------------------------------------------------
*
*
__________________________________________________________________________________

   (C) <<<<<<<<< npm init : >>>>>>>>>
__________________________________________________
   npm init :                                     |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* npm init :
                                                                                        
2) Definition of npm init ?
---------------------------
*
 
3) What is npm init About ?
---------------------------
*
*

4) What does npm init Do ?
--------------------------
*
*

5) Advantages/Benefits of npm init :
------------------------------------
*
*
*

6) Disadvantages/Drawback of npm init :
---------------------------------------
*
*
*  

7) Examples of npm init :
-------------------------
*
*
__________________________________________________________________________________

   (D)  <<<<<<<<< creating a package.json file. >>>>>>>>>
                  `````````````````````````````
__________________________________________________
                                                  |
          creating a package.json file.           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* creating a package.json file.
                                                                                        
2) Definition of creating a package.json file. ?
------------------------------------------------
*
 
3) What is creating a package.json file. About ?
------------------------------------------------
*
*

4) What does creating a package.json file. Do ?
-----------------------------------------------
*
*

5) Advantages/Benefits of creating a package.json file. :
---------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of creating a package.json file. :
------------------------------------------------------------
*
*
*  

7) Examples of creating a package.json file. :
----------------------------------------------
*
*
__________________________________________________________________________________

    <<<<<<<<< express module >>>>>>>>>
__________________________________________________
                                                  |
       express module                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* express module
                                                                                        
2) Definition of express module ?
---------------------------------
*
 
3) What is express module About ?
---------------------------------
*
*

4) What does express module Do ?
--------------------------------
*
*

5) Advantages/Benefits of express module :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of express module :
---------------------------------------------
*
*
*  

7) Examples of express module :
-------------------------------
*
*
__________________________________________________________________________________

     <<<<<<<<< nedb module >>>>>>>>>
__________________________________________________
   nedb module                                    |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* nedb module
                                                                                        
2) Definition of nedb module ?
------------------------------
*
 
3) What is nedb module About ?
------------------------------
*
*

4) What does nedb module Do ?
-----------------------------
*
*

5) Advantages/Benefits of nedb module :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of nedb module :
------------------------------------------
*
*
*  

7) Examples of nedb module :
----------------------------
*
*
_______________________________________________________________________________

      <<<<<<<<< cors module >>>>>>>>>
__________________________________________________
                                                  |
          cors module                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* cors module
                                                                                        
2) Definition of cors module ?
------------------------------
*
 
3) What is cors module About ?
------------------------------
*
*

4) What does cors module Do ?
-----------------------------
*
*

5) Advantages/Benefits of cors module :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of cors module :
------------------------------------------
*
*
*  

7) Examples of cors module :
----------------------------
*
*
__________________________________________________________________________________

  (F)  <<<<<<<<< create a file, data.csv, >>>>>>>>>
__________________________________________________
                                                  |
      create a file, data.csv,                    |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* create a file, data.csv,
                                                                                        
2) Definition of data.csv ?
---------------------------
*
 
3) What is data.csv About ?
---------------------------
*
*

4) What does data.csv Do ?
--------------------------
*
*

5) Advantages/Benefits of data.csv :
------------------------------------
*
*
*

6) Disadvantages/Drawback of data.csv :
---------------------------------------
*
*
*  

7) Examples of data.csv :
-------------------------
*
*
__________________________________________________________________________________

   (L)  <<<<<<<<< The fetch() api >>>>>>>>>
                  ```````````````
__________________________________________________
                                                  |
   The fetch() api                                |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* The fetch() api
                                                                                        
2) Definition of The fetch() api ?
----------------------------------
*
 
3) What is The fetch() api About ?
----------------------------------
*
*

4) What does The fetch() api Do ?
---------------------------------
*
*

5) Advantages/Benefits of The fetch() api :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of The fetch() api :
----------------------------------------------
*
*
*  

7) Examples of The fetch() api :
--------------------------------
*
*
__________________________________________________________________________________

 13. <<<<<<<<< ReactJS - Form programming >>>>>>>>>

      React provides two types of components to support form programming :
               (A) Controlled component −
               (B) Uncontrolled component −
__________________________________________________
     ReactJS - Form programming                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Form programming
                                                                                        
2) Definition of ReactJS - Form programming ?
---------------------------------------------
*
 
3) What is ReactJS - Form programming About ?
---------------------------------------------
*
*

4) What does ReactJS - Form programming Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Form programming :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Form programming :
---------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Form programming :
-------------------------------------------
*
*
__________________________________________________________________________________

   (A)  <<<<<<<<< Controlled component − >>>>>>>>>
__________________________________________________
                                                  |
          Controlled component −                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Controlled component −
                                                                                        
2) Definition of Controlled component − ?
-----------------------------------------
*
 
3) What is Controlled component − About ?
-----------------------------------------
*
*

4) What does Controlled component − Do ?
----------------------------------------
*
*

5) Advantages/Benefits of Controlled component − :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Controlled component − :
-----------------------------------------------------
*
*
*  

7) Examples of Controlled component − :
---------------------------------------
*
*
__________________________________________________________________________________

   (B)  <<<<<<<<< Uncontrolled component − >>>>>>>>>
__________________________________________________
                                                  |
          Uncontrolled component −                |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Uncontrolled component −
                                                                                        
2) Definition of Uncontrolled component − ?
-------------------------------------------
*
 
3) What is Uncontrolled component − About ?
-------------------------------------------
*
*

4) What does Uncontrolled component − Do ?
------------------------------------------
*
*

5) Advantages/Benefits of Uncontrolled component − :
----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Uncontrolled component − :
-------------------------------------------------------
*
*
*  

7) Examples of Uncontrolled component − :
-----------------------------------------
*
*
__________________________________________________________________________________

 14. <<<<<<< ReactJS - Routing >>>>>>>>>

     (A) Install React Router :
          * Let us learn how to install React Router component in our Expense :
          * Open a command prompt and go to the root folder of our application , 
                 _________________________________
                |  cd /go/to/expense/manager      |
                |_________________________________| 
          
          * Install the react router using below command ,
              ___________________________________________
             |  npm install react-router-dom --save      |
             |___________________________________________|

    Concept :
    "React router" provides "four components" to manage navigation in React
    application ,
         1) Router -
         2) Link -
         3) Switch & Route − Both are used together.
     
    (B) Nested routing -
    (C) Creating navigation -
            * Home screen − 
            * Expense list screen −
            * Expense add screen −
__________________________________________________
     ReactJS - Routing                            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Routing
                                                                                        
2) Definition of ReactJS - Routing ?
------------------------------------
*
 
3) What is ReactJS - Routing About ?
------------------------------------
*
*

4) What does ReactJS - Routing Do ?
-----------------------------------
*
*

5) Advantages/Benefits of ReactJS - Routing :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Routing :
------------------------------------------------
*
*
*  

7) Examples of ReactJS - Routing :
----------------------------------
*
*
_________________________________________________________________________________

 1. <<<<<<<<< Router - >>>>>>>>>
__________________________________________________
    Router -                                      |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Router -
                                                                                        
2) Definition of Router - ?
---------------------------
*
 
3) What is Router - About ?
---------------------------
*
*

4) What does Router - Do ?
--------------------------
*
*

5) Advantages/Benefits of Router - :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Router - :
---------------------------------------
*
*
*  

7) Examples of Router - :
-------------------------
*
*
__________________________________________________________________________________

 2. <<<<<<<<< Link - >>>>>>>>>
__________________________________________________
   Link -                                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Link -
                                                                                        
2) Definition of Link - ?
-------------------------
*
 
3) What is Link - About ?
-------------------------
*
*

4) What does Link - Do ?
-------------------------
*
*

5) Advantages/Benefits of Link - :
----------------------------------
*
*
*

6) Disadvantages/Drawback of Link - :
-------------------------------------
*
*
*  

7) Examples of Link - :
------------------------
*
*
_________________________________________________________________________________

 3. <<<<<<<<< Switch & Route − Both are used together. >>>>>>>>>
__________________________________________________
                                                  |
     Switch & Route − Both are used together.     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Switch & Route − Both are used together.
                                                                                        
2) Definition of Switch & Route ?
---------------------------------
*
 
3) What is Switch & Route About ?
---------------------------------
*
*

4) What does Switch & Route Do ?
--------------------------------
*
*

5) Advantages/Benefits of Switch & Route :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of Switch & Route :
---------------------------------------------
*
*
*  

7) Examples of Switch & Route :
-------------------------------
*
*
__________________________________________________________________________________

   (A) <<<<<<<<< Install React Router >>>>>>>>>
__________________________________________________
                                                  |
          Install React Router                    |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Install React Router
                                                                                        
2) Definition of Install React Router ?
---------------------------------------
*
 
3) What is Install React Router About ?
---------------------------------------
*
*

4) What does Install React Router Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Install React Router :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Install React Router :
---------------------------------------------------
*
*
*  

7) Examples of Install React Router :
-------------------------------------
*
*
_________________________________________________________________________________

   (B)  <<<<<<<<< Nested routing - >>>>>>>>>
__________________________________________________
                                                  |
           Nested routing                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Nested routing
                                                                                        
2) Definition of Nested routing ?
---------------------------------
*
 
3) What is Nested routing About ?
---------------------------------
*
*

4) What does Nested routing Do ?
--------------------------------
*
*

5) Advantages/Benefits of Nested routing :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of Nested routing :
---------------------------------------------
*
*
*  

7) Examples of Nested routing :
-------------------------------
*
*
__________________________________________________________________________________

   (C)  <<<<<<<<< Creating navigation >>>>>>>>>
__________________________________________________
                                                  |
         Creating navigation                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Creating navigation
                                                                                        
2) Definition of Creating navigation ?
--------------------------------------
*
 
3) What is Creating navigation About ?
--------------------------------------
*
*

4) What does Creating navigation Do ?
-------------------------------------
*
*

5) Advantages/Benefits of Creating navigation :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of Creating navigation :
--------------------------------------------------
*
*
*  

7) Examples of Creating navigation :
------------------------------------
*
*
_________________________________________________________________________________

 15. <<<<<<<<< ReactJS - Redux >>>>>>>>>

    (A) Concepts  :
        ```````````  
          1) Store −
          2) Actions -
          3) Reducers -
          4) Action creators -
          5) Component − 
                The workflow(Diagram) of a typical redux store :
  ______________________________________________________________________________
 |    _____________________                            ____________________     | 
 |   |  React Components   |>>>>>>>>>>>>>>>>>>>>>>>>>>|  Actions           |    |
 |   |_____________________|                          |____________________|    |
 |              |              Component                          |             |  
 |              |            create actions                       |             |
 | Components   |        (using action creators)                  | Actions are | 
 | Subscribe to |           and dispatches it                     |  processed  |
 | current state|                                                 |     by      | 
 | using connect|                                                 |  Reducers   | 
 | API          |                 Reducers                        |             |
 |   ___________|__________   modifies state          ____________|_________    | 
 |  |         State        |  based on action        |      Reducers        |   | 
 |  |   (in Redux store)   |<<<<<<<<<<<<<<<<<<<<<<<<<|______________________|   |
 |  |______________________|                                                    |
 |______________________________________________________________________________|
       
        (B) Redux API :
            `````````````
              1) The signature of the connect API is −
 ________________________________________________________________________________
| function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?) |
|________________________________________________________________________________|
   
 * All parameters are optional and it returns a HOC (higher order component).
 * A higher order component is a function which wraps a component and returns 
   a new component.
      ______________________________________________________________
     |   let hoc = connect(mapStateToProps, mapDispatchToProps)     |
     |   let connectedComponent = hoc(component)                    |
     |______________________________________________________________| 
   
   * Let us see the first two parameters which will be enough for most cases , 
       __________________________________
      |  (state, ownProps?) => Object    |
      |__________________________________|
         
          + Here, "state" refers current state of the store.
          + and "Object" refers the new props of the component.
                =  It gets called whenever the state of the store is updated.
       
   * mapDispatchToProps − Accepts a function with below signature.
       _____________________________________________
      |   Object | (dispatch, ownProps?) => Object  |
      |_____________________________________________|

  * Here, "dispatch" refers the dispatch object used to dispatch action in the
    redux store and "Object" refers one or more dispatch functions as props of the     component. 
        ___________________________________________________________________
       |  (dispatch) => {                                                  |
       |  addDispatcher: (dispatch) => dispatch({ type: 'ADD_ITEM',        |
       |  payload: { } }),                                                 |
       |  removeispatcher: (dispatch) => dispatch({ type: 'REMOVE_ITEM',   |
       |  payload: { } }),                                                 |
       |  }                                                                | 
       |___________________________________________________________________| 
  
    (C)  Provider component :
         `````````````````````
           * The sample code of Provider Component -
      ______________________________________________________
     |   import React from 'react'                          |
     |   import ReactDOM from 'react-dom'                   |
     |   import { Provider } from 'react-redux'             | 
     |   import { App } from './App'                        |
     |   import createStore from './createReduxStore'       |
     |                                                      |
     |   const store = createStore()                        |
     |                                                      |
     |   ReactDOM.render(                                   |
     |      <Provider store={store}>                        |
     |         <App />                                      |
     |      </Provider>,                                    |
     |      document.getElementById('root')                 |
     |   )                                                  |
     |______________________________________________________| 
 
         * Now, all the component inside the App component can get access to 
           the Redux store by using connect API.
     
    (D) Working example :
        `````````````````` 
  * Let us recreate our expense manager application and uses the React Redux
    concept to maintain the state of the application.
                 Next, install Redux and React redux library ,
             ___________________________________________
            |  npm install redux react-redux --save     |
            |___________________________________________|
  
    Next, install uuid library to generate unique identifier for new expenses.
                  _____________________________
                 |  npm install uuid --save    |
                 |_____________________________|
     Next, open the application in your favorite editor.

     Next, create "src" folder under the root directory of the application.

     Next, create "actions" folder under src folder.

     Next, create a file, "types.js" under "src/actions" folder and start editing.

     Next, add two action type, one for add expense and one for remove expense.
            _______________________________________________________
           |    export const ADD_EXPENSE = 'ADD_EXPENSE';          |
           |    export const DELETE_EXPENSE = 'DELETE_EXPENSE';    |
           |_______________________________________________________|

    Next, create a file, "index.js under src/actions" folder to add action and 
    start editing. 
    
    Next, import "uuid" to create unique identifier. 
             _________________________________________
            |  import { v4 as uuidv4 } from 'uuid';   |
            |_________________________________________| 

    Next, import action types.
       ____________________________________________________________
      |  import { ADD_EXPENSE, DELETE_EXPENSE } from './types';    |
      |____________________________________________________________|
    
    Next, add a new function to return action type for adding an expense and
    export it.
  ______________________________________________________________________________
 |    export const addExpense = ({ name, amount, spendDate, category }) => ({   |
 |       type: ADD_EXPENSE,                                                     |
 |       payload: {                                                             |
 |          id: uuidv4(),                                                       |
 |          name,                                                               | 
 |          amount,                                                             |  
 |          spendDate,                                                          |
 |          category                                                            |
 |       }                                                                      |
 |    });                                                                       |
 |______________________________________________________________________________| 
         * Here, the function expects expense object and return action type
           of ADD_EXPENSE along with a payload of expense information.
         * Next, add a new function to return action type for deleting an 
           expense and export it ,
      __________________________________________________ 
     |   export const deleteExpense = id => ({          |
     |      type: DELETE_EXPENSE,                       |
     |      payload: {                                  |  
     |         id                                       |
     |      }                                           |
     |   });                                            | 
     |__________________________________________________| 

   * Here, the function expects id of the expense item to be deleted and return
     action type of 'DELETE_EXPENSE' along with a payload of expense id. 
    
          * The complete source code of the action is given below − 
  ____________________________________________________________________________
 |  import { v4 as uuidv4 } from 'uuid';                                      | 
 |  import { ADD_EXPENSE, DELETE_EXPENSE } from './types';                    |
 |                                                                            |
 |  export const addExpense = ({ name, amount, spendDate, category }) => ({   |
 |     type: ADD_EXPENSE,                                                     |
 |     payload: {                                                             |
 |        id: uuidv4(),                                                       | 
 |        name,                                                               |
 |        amount,                                                             |
 |        spendDate,                                                          |
 |        category                                                            |
 |     }                                                                      |
 |  });                                                                       | 
 |  export const deleteExpense = id => ({                                     |  
 |     type: DELETE_EXPENSE,                                                  |
 |     payload: {                                                             |
 |        id                                                                  |
 |     }                                                                      | 
 |  });                                                                       |
 |____________________________________________________________________________|
     
    * Next, create a new folder, reducers under "src" folder. 
    * Next, create a file, index.js under src/reducers to write reducer function
      and start editing. 
    * Next, import the action types ,
        ____________________________________________________________________
       |  import { ADD_EXPENSE, DELETE_EXPENSE } from '../actions/types';   |
       |____________________________________________________________________|

  Next, add a function, "expensesReducer" to do the actual feature of adding and
  updating expenses in the redux store , 
  _______________________________________________________________________________
 |   export default function expensesReducer(state = [], action) {               |
 |      switch (action.type) {                                                   |
 |         case ADD_EXPENSE:                                                     |
 |            return [...state, action.payload];                                 | 
 |         case DELETE_EXPENSE:                                                  |
 |            return state.filter(expense => expense.id !== action.payload.id);  |
 |         default:                                                              | 
 |            return state;                                                      |
 |      }                                                                        |
 |   }                                                                           |
 |_______________________________________________________________________________|

      The complete source code of the reducer is given below − 
 _______________________________________________________________________________
|  import { ADD_EXPENSE, DELETE_EXPENSE } from '../actions/types';              |  
|                                                                               |
|  export default function expensesReducer(state = [], action) {                | 
|     switch (action.type) {                                                    |
|         case ADD_EXPENSE:                                                     |  
|           return [...state, action.payload];                                  |
|        case DELETE_EXPENSE:                                                   | 
|           return state.filter(expense => expense.id !== action.payload.id);   |
|        default:                                                               |
|           return state;                                                       |
|     }                                                                         |
|  }                                                                            |
|_______________________________________________________________________________| 
    
   * Here, the reducer checks the action type and execute the relevant code. 
       
     Next, create components folder under src folder.
       
     Next, create a file, "ExpenseEntryItemList.css" under "src/components" folder
     and add generic style for the html tables , 
    _______________________________________________________
   |  html {                                               | 
   |     font-family: sans-serif;                          |
   |  }                                                    |
   |  table {                                              |
   |     border-collapse: collapse;                        |
   |     border: 2px solid rgb(200,200,200);               |
   |     letter-spacing: 1px;                              |
   |     font-size: 0.8rem;                                |
   |  }                                                    |
   |  td, th {                                             |
   |     border: 1px solid rgb(190,190,190);               |
   |     padding: 10px 20px;                               |
   |  }                                                    | 
   |  th {                                                 |
   |     background-color: rgb(235,235,235);               | 
   |  }                                                    | 
   |  td, th {                                             |
   |     text-align: left;                                 |
   |  }                                                    |
   |  tr:nth-child(even) td {                              |
   |     background-color: rgb(250,250,250);               |
   |  }                                                    | 
   |  tr:nth-child(odd) td {                               |
   |     background-color: rgb(245,245,245);               |
   |  }                                                    |
   |  caption {                                            |
   |     padding: 10px;                                    |  
   |  }                                                    |
   |  tr.highlight td {                                    | 
   |     background-color: #a6a8bd;                        |
   |  }                                                    |
   |_______________________________________________________|

     Next, create a file, ExpenseEntryItemList.js under src/components folder
     and start editing.

     Next, import React and React redux library , 
      ____________________________________________
     |  import React from 'react';                |
     |  import { connect } from 'react-redux';    |
     |____________________________________________|
    
     Next, import ExpenseEntryItemList.css file ,
              __________________________________________
             |  import './ExpenseEntryItemList.css';    |
             |__________________________________________|

     Next, import action creators ,
        _________________________________________________
       |   import { deleteExpense } from '../actions';   |
       |   import { addExpense } from '../actions';      |
       |_________________________________________________|  
    
   Next, create a class, ExpenseEntryItemList and call constructor with "props" ,
            ______________________________________________________________
           |   class ExpenseEntryItemList extends React.Component {       |
           |      constructor(props) {                                    |
           |         super(props);                                        |
           |      }                                                       |
           |   }                                                          | 
           |______________________________________________________________|

    Next, create "mapStateToProps" function ,
           _________________________________________
          |  const mapStateToProps = state => {     |
          |     return {                            |
          |        expenses: state                  |
          |     };                                  |
          |  };                                     |
          |_________________________________________|

   Here, we copied the input state to expenses props of the component.
   Next, create "mapDispatchToProps" function.  
     _________________________________________________
    |   const mapDispatchToProps = dispatch => {      |  
    |      return {                                   | 
    |         onAddExpense: expense => {              |
    |            dispatch(addExpense(expense));       |  
    |         },                                      |
    |         onDelete: id => {                       |
    |            dispatch(deleteExpense(id));         |
    |         }                                       |
    |      };                                         |
    |   };                                            |
    |_________________________________________________|

     Here, we created two function, one to dispatch add expense (addExpense)
     function and another to dispatch delete expense (deleteExpense) function
     and mapped those function to props of the component.
     
     Next, export the component using connect api.
    ___________________________________
   |  export default connect(          |
   |     mapStateToProps,              |
   |     mapDispatchToProps            |
   |  )(ExpenseEntryItemList);         |
   |___________________________________|
   
     Now, the "component gets three new properties" given below −
      
         1) expenses − list of expense
         2) onAddExpense − function to dispatch addExpense function
         3) onDelete − function to dispatch deleteExpense function  
    
     Next, add few expense into the redux store in the constructor using
     "onAddExpense" property ,
 _____________________________________________________________________________________________________________
| if (this.props.expenses.length == 0)                                                                        |
| {                                                                                                           |
|    const items = [                                                                                          |
|       { id: 1, name: "Pizza", amount: 80, spendDate: "2020-10-10", category: "Food" },                      |
|       { id: 2, name: "Grape Juice", amount: 30, spendDate: "2020-10-12", category: "Food" },                |
|       { id: 3, name: "Cinema", amount: 210, spendDate: "2020-10-16", category: "Entertainment" },           |
|       { id: 4, name: "Java Programming book", amount: 242, spendDate: "2020-10-15", category: "Academic" }, |
|       { id: 5, name: "Mango Juice", amount: 35, spendDate: "2020-10-16", category: "Food" },                |
|       { id: 6, name: "Dress", amount: 2000, spendDate: "2020-10-25", category: "Cloth" },                   |
|       { id: 7, name: "Tour", amount: 2555, spendDate: "2020-10-29", category: "Entertainment" },            |
|       { id: 8, name: "Meals", amount: 300, spendDate: "2020-10-30", category: "Food" },                     |
|       { id: 9, name: "Mobile", amount: 3500, spendDate: "2020-11-02", category: "Gadgets" },                |
|       { id: 10, name: "Exam Fees", amount: 1245, spendDate: "2020-11-04", category: "Academic" }            |
|    ]                                                                                                        |
|    items.forEach((item) => {                                                                                |
|      this.props.onAddExpense(                                                                               |
|         {                                                                                                   |
|            name: item.name,                                                                                 |
|            amount: item.amount,                                                                             |
|            spendDate: item.spendDate,                                                                       |
|            category: item.category                                                                          |
|         }                                                                                                   |
|      );                                                                                                     |
|    })                                                                                                       |
| }                                                                                                           |
|_____________________________________________________________________________________________________________|
  
  Next, add an event handler to delete the expense item using expense id.
    _________________________________
   |  handleDelete = (id,e) => {     |
   |     e.preventDefault();         |
   |     this.props.onDelete(id);    |
   |  }                              | 
   |_________________________________| 
  
       Here, the event handler calls the onDelete dispatcher, which call
       "deleteExpense" along with the expense id.
       
       Next, add a method to calculate the total amount of all expenses.
         _________________________________________________________________
        |   getTotal() {                                                  |
        |      let total = 0;                                             |
        |      for (var i = 0; i < this.props.expenses.length; i++) {     | 
        |         total += this.props.expenses[i].amount                  | 
        |      }                                                          |
        |      return total;                                              |
        |   }                                                             |
        |_________________________________________________________________|
       
      Next, add render() method and list the expense item in the tabular format.
  ________________________________________________________________________________________
 |  render() {                                                                            |
 |     const lists = this.props.expenses.map(                                             |
 |        (item) =>                                                                       |
 |        <tr key={item.id}>                                                              |
 |           <td>{item.name}</td>                                                         |
 |           <td>{item.amount}</td>                                                       |
 |           <td>{new Date(item.spendDate).toDateString()}</td>                           |
 |           <td>{item.category}</td>                                                     | 
 |           <td><a href="#"                                                              |
 |              onClick={(e) => this.handleDelete(item.id, e)}>Remove</a></td>            | 
 |        </tr>                                                                           |
 |  );                                                                                    |
 |  return (                                                                              |
 |     <div>                                                                              |
 |        <table>                                                                         |
 |           <thead>                                                                      |
 |              <tr>                                                                      |
 |                 <th>Item</th>                                                          |
 |                 <th>Amount</th>                                                        |
 |                 <th>Date</th>                                                          |
 |                 <th>Category</th>                                                      |
 |                 <th>Remove</th>                                                        |
 |              </tr>                                                                     |
 |           </thead>                                                                     |
 |           <tbody>                                                                      |
 |              {lists}                                                                   |
 |              <tr>                                                                      | 
 |                 <td colSpan="1" style={{ textAlign: "right" }}>Total Amount</td>       |
 |                 <td colSpan="4" style={{ textAlign: "left" }}>                         |
 |                    {this.getTotal()}                                                   |
 |                 </td>                                                                  |
 |              </tr>                                                                     |
 |           </tbody>                                                                     | 
 |        </table>                                                                        |
 |     </div>                                                                             | 
 |  );                                                                                    |
 | }                                                                                      |
 |________________________________________________________________________________________|
       
    * Here, we set the event handler "handleDelete" to remove the expense from 
       the store. 
    
    * The complete source code of the "ExpenseEntryItemList" component is given
      below -
  ____________________________________________________________________________________________________________________
 | import React from 'react';                                                                                         |
 | import { connect } from 'react-redux';                                                                             |
 | import './ExpenseEntryItemList.css';                                                                               |
 | import { deleteExpense } from '../actions';                                                                        |
 | import { addExpense } from '../actions';                                                                           |
 |                                                                                                                    |
 | class ExpenseEntryItemList extends React.Component {                                                               | 
 |    constructor(props) {                                                                                            |
 |       super(props);                                                                                                |
 |                                                                                                                    |
 |       if (this.props.expenses.length == 0){                                                                        |
 |          const items = [                                                                                           |
 |             { id: 1, name: "Pizza", amount: 80, spendDate: "2020-10-10",  |category: "Food" },                     |
 |             { id: 2, name: "Grape Juice", amount: 30, spendDate: "2020-10-12", category: "Food" },                 |
 |             { id: 3, name: "Cinema", amount: 210, spendDate: "2020-10-16", category: "Entertainment" },            |
 |             { id: 4, name: "Java Programming book", amount: 242, spendDate: "2020-10-15", category: "Academic" },  |
 |             { id: 5, name: "Mango Juice", amount: 35, spendDate: "2020-10-16", category: "Food" },                 |
 |             { id: 6, name: "Dress", amount: 2000, spendDate: "2020-10-25", category: "Cloth" },                    |
 |             { id: 7, name: "Tour", amount: 2555, spendDate: "2020-10-29", category: "Entertainment" },             |
 |             { id: 8, name: "Meals", amount: 300, spendDate: "2020-10-30", category: "Food" },                      |
 |             { id: 9, name: "Mobile", amount: 3500, spendDate: "2020-11-02", category: "Gadgets" },                 |
 |             { id: 10, name: "Exam Fees", amount: 1245, spendDate: "2020-11-04", category: "Academic" }             |
 |         ]                                                                                                          |
 |         items.forEach((item) => {                                                                                  |
 |            this.props.onAddExpense(                                                                                |
 |               {                                                                                                    |
 |                  name: item.name,                                                                                  |
 |                  amount: item.amount,                                                                              | 
 |                  spendDate: item.spendDate,                                                                        |
 |                  category: item.category                                                                           |
 |               }                                                                                                    | 
 |            );                                                                                                      |
 |         })                                                                                                         |
 |     }                                                                                                              |
 | }                                                                                                                  |
 | handleDelete = (id,e) => {                                                                                         |
 |    e.preventDefault();                                                                                             |
 |    this.props.onDelete(id);                                                                                        |
 | }                                                                                                                  |
 |  getTotal() {                                                                                                      |
 |     let total = 0;                                                                                                 |
 |     for (var i = 0; i < this.props.expenses.length; i++) {                                                         |
 |       total += this.props.expenses[i].amount                                                                       |
 |     }                                                                                                              |
 |     return total;                                                                                                  |
 |  }                                                                                                                 |
 |  render() {                                                                                                        |
 |     const lists = this.props.expenses.map((item) =>                                                                | 
 |        <tr key={item.id}>                                                                                          |
 |           <td>{item.name}</td>                                                                                     |
 |           <td>{item.amount}</td>                                                                                   |
 |           <td>{new Date(item.spendDate).toDateString()}</td>                                                       |
 |           <td>{item.category}</td>                                                                                 |
 |           <td><a href="#"                                                                                          |
 |              onClick={(e) => this.handleDelete(item.id, e)}>Remove</a></td>                                        |
 |        </tr>                                                                                                       |  
 |     );                                                                                                             |
 |     return (                                                                                                       |
 |        <div>                                                                                                       |
 |           <table>                                                                                                  |
 |              <thead>                                                                                               |
 |                 <tr>                                                                                               |
 |                    <th>Item</th>                                                                                   |
 |                    <th>Amount</th>                                                                                 |
 |                    <th>Date</th>                                                                                   | 
 |                    <th>Category</th>                                                                               |
 |                    <th>Remove</th>                                                                                 |
 |                 </tr>                                                                                              |
 |              </thead>                                                                                              |
 |              <tbody>                                                                                               | 
 |                 {lists}                                                                                            |
 |                 <tr>                                                                                               |
 |                    <td colSpan="1" style={{ textAlign: "right" }}>Total Amount</td>                                |   
 |                    <td colSpan="4" style={{ textAlign: "left" }}>                                                  |
 |                       {this.getTotal()}                                                                            |
 |                    </td>                                                                                           |
 |                 </tr>                                                                                              | 
 |              </tbody>                                                                                              |
 |           </table>                                                                                                 |
 |        </div>                                                                                                      |
 |     );                                                                                                             |
 |  }                                                                                                                 |
 | }                                                                                                                  | 
 | const mapStateToProps = state => {                                                                                 |
 |    return {                                                                                                        |
 |       expenses: state                                                                                              |
 |    };                                                                                                              |
 | };                                                                                                                 |
 | const mapDispatchToProps = dispatch => {                                                                           | 
 |    return {                                                                                                        |
 |       onAddExpense: expense => {                                                                                   |
 |          dispatch(addExpense(expense));                                                                            |
 |       },                                                                                                           |  
 |       onDelete: id => {                                                                                            |
 |          dispatch(deleteExpense(id));                                                                              |
 |       }                                                                                                            |
 |    };                                                                                                              |
 | };                                                                                                                 |
 | export default connect(                                                                                            |         
 |    mapStateToProps,                                                                                                |
 |    mapDispatchToProps                                                                                              |
 | )(ExpenseEntryItemList);                                                                                           |
 |____________________________________________________________________________________________________________________| 
      
       * Next, create a file, App.js under the src/components folder and 
         "ExpenseEntryItemList" component.
    __________________________________________________________________
   |  import React, { Component } from 'react';                       | 
   |  import ExpenseEntryItemList from './ExpenseEntryItemList';      |
   |                                                                  | 
   |  class App extends Component {                                   | 
   |     render() {                                                   | 
   |        return (                                                  |
   |           <div>                                                  | 
   |              <ExpenseEntryItemList />                            |     
   |           </div>                                                 | 
   |        );                                                        |
   |     }                                                            |
   |  }                                                               |
   |  export default App;                                             | 
   |__________________________________________________________________|
     
      * Next, create a file, "index.js" under src folder.
     ___________________________________________________
    |  import React from 'react';                       |  
    |  import ReactDOM from 'react-dom';                |
    |  import { createStore } from 'redux';             |
    |  import { Provider } from 'react-redux';          | 
    |  import rootReducer from './reducers';            | 
    |  import App from './components/App';              |
    |                                                   |
    |  const store = createStore(rootReducer);          | 
    |                                                   |
    |  ReactDOM.render(                                 |
    |     <Provider store={store}>                      | 
    |        <App />                                    |
    |     </Provider>,                                  |
    |     document.getElementById('root')               |
    |  );                                               | 
    |___________________________________________________|
       
  Here, 
      + Create a store using createStore by attaching the our reducer.
      + Used Provider component from React redux library and set the store as
        props, which enables all the nested component to 'connect' to store
        using connect api.
      
   * Finally, create a public folder under the root folder and create index.html
     file. 
        _____________________________________________________________________
       |  <!DOCTYPE html>                                                    |
       |  <html lang="en">                                                   | 
       |     <head>                                                          |
       |        <meta charset="utf-8">                                       |
       |        <title>React Containment App</title>                         |
       |     </head>                                                         |
       |     <body>                                                          | 
       |        <div id="root"></div>                                        |
       |        <script type="text/JavaScript" src="./index.js"></script>    |
       |     </body>                                                         |
       |  </html>                                                            | 
       |_____________________________________________________________________|
    
         * Next, serve the application using npm command.
              _______________
             |  npm start    | 
             |_______________|

  * Next, open the browser and enter http://localhost:3000 in the address bar
    and press enter. 
  * Clicking the remove link will remove the item from redux store.
  __________________________________________________________________________
 |  Item       |   Amount   |   Date            |   Category   |   Remove   |
 |`````````````|````````````|```````````````````|``````````````|````````````|
 |_____________|____________|___________________|______________|____________|
 |  Pizza      |    80      | Sat Oct 10 2020   |   Food       |   Remove   |        
 |_____________|____________|___________________|______________|____________|
 |   Grape     |    30      | Mon Oct 12 2020   |   Food       |   Remove   |  
 |   Juice     |            |                   |              |            |
 |_____________|____________|___________________|______________|____________|
 |   Cinema    |   210      | Fri Oct 16 2020   | Entertainment|   Remove   |
 |_____________|____________|___________________|______________|____________|
 |  Java       |   242      | Thu Oct 15 2020   |   Academic   |   Remove   |  
 | Programming |            |                   |              |            |
 |   book      |            |                   |              |            |  
 |_____________|____________|___________________|______________|____________|
 | Mango Juice |   35       | Fri Oct 16 2020   |   Food       |   Remove   |
 |_____________|____________|___________________|______________|____________|
 |   Dress     |   2000     | Sun Oct 25 2020   |   Cloth      |   Remove   |
 |_____________|____________|___________________|______________|____________|
 |   Tour      |   2555     | Thu Oct 29 2020   | Entertainment|   Remove   |
 |_____________|____________|___________________|______________|____________|
 |  Meals      |   300      | Fri Oct 30 2020   |    Food      |   Remove   | 
 |_____________|____________|___________________|______________|____________|
 |   Mobile    |   3500     | Mon Nov 02 2020   |   Gadgets    |   Remove   |
 |_____________|____________|___________________|______________|____________|
 |  Exam Fees  |   1245     | Wed Nov 04 2020   |  Academic    |   Remove   |
 |_____________|____________|___________________|______________|____________|
 | Total Amount|  10197     |                   |              |            |
 |_____________|____________|___________________|______________|____________|        
                 
__________________________________________________
     ReactJS - Redux                              |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Redux
                                                                                        
2) Definition of ReactJS - Redux ?
----------------------------------
* 
 
3) What is ReactJS - Redux About ?
----------------------------------
* 
*

4) What does ReactJS - Redux Do ?
---------------------------------
*
*

5) Advantages/Benefits of ReactJS - Redux :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Redux :
----------------------------------------------
*
*
*  

7) Examples of ReactJS - Redux :
--------------------------------
*
*
_________________________________________________________________________________

    1) <<<<<<<<< Store − >>>>>>>>>
__________________________________________________
     Store −                                      |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Store −
                                                                                        
2) Definition of Store − ?
--------------------------
*
 
3) What is Store − About ?
--------------------------
*
*

4) What does Store − Do ?
-------------------------
*
*

5) Advantages/Benefits of Store − :
-----------------------------------
*
*
*

6) Disadvantages/Drawback of Store − :
--------------------------------------
*
*
*  

7) Examples of Store − :
------------------------
*
*
_______________________________________________________________________________

    2)   <<<<<<<<< Actions - >>>>>>>>>
__________________________________________________
  Actions -                                       |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Actions -
                                                                                        
2) Definition of Actions - ?
----------------------------
*
 
3) What is Actions - About ?
----------------------------
*
*

4) What does Actions - Do ?
---------------------------
*
*

5) Advantages/Benefits of Actions - :
-------------------------------------
*
*
*

6) Disadvantages/Drawback of Actions - :
----------------------------------------
*
*
*  

7) Examples of Actions - :
--------------------------
*
*
__________________________________________________________________________________

   3)   <<<<<<<<< Reducers - >>>>>>>>>
__________________________________________________
                                                  |
          Reducers -                              |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Reducers -
                                                                                        
2) Definition of Reducers - ?
-----------------------------
*
 
3) What is Reducers - About ?
-----------------------------
*
*

4) What does Reducers - Do ?
----------------------------
*
*

5) Advantages/Benefits of Reducers - :
--------------------------------------
*
*
*

6) Disadvantages/Drawback of Reducers - :
-----------------------------------------
*
*
*  

7) Examples of Reducers - :
---------------------------
*
*
__________________________________________________________________________________

   4)  <<<<<<<<< Action creators - >>>>>>>>>
__________________________________________________
                                                  |
          Action creators -                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Action creators -
                                                                                        
2) Definition of Action creators - ?
------------------------------------
*
 
3) What is Action creators - About ?
------------------------------------
*
*

4) What does Action creators - Do ?
-----------------------------------
*
*

5) Advantages/Benefits of Action creators - :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of Action creators - :
------------------------------------------------
*
*
*  

7) Examples of Action creators - :
----------------------------------
*
*
__________________________________________________________________________________

   5)   <<<<<<<<< Component − >>>>>>>>>

            The workflow(Diagram) of a typical redux store :
__________________________________________________
                                                  |
          Component −                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Component −
                                                                                        
2) Definition of Component − ?
------------------------------
*
 
3) What is Component − About ?
------------------------------
*
*

4) What does Component − Do ?
-----------------------------
*
*

5) Advantages/Benefits of Component − :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of Component − :
------------------------------------------
*
*
*  

7) Examples of Component − :
----------------------------
*
*
__________________________________________________________________________________

   (B)  <<<<<<<<<   Redux API :  >>>>>>>>>
__________________________________________________
                                                  |
         Redux API :                              |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Redux API : 
                                                                                        
2) Definition of Redux API ?
----------------------------
*
 
3) What is Redux API About ?
-----------------------------
*
*

4) What does Redux API Do ?
---------------------------
*
*

5) Advantages/Benefits of Redux API :
-------------------------------------
*
*
*

6) Disadvantages/Drawback of Redux API :
----------------------------------------
*
*
*  

7) Examples of Redux API :
--------------------------
*
*
__________________________________________________________________________________

   7)   <<<<<<<<< Provider component : >>>>>>>>>
__________________________________________________
                                                  |
         Provider component :                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Provider component :
                                                                                        
2) Definition of Provider component ?
-------------------------------------
*
 
3) What is Provider component About ?
-------------------------------------
*
*

4) What does Provider component Do ?
------------------------------------
*
*

5) Advantages/Benefits of Provider component :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of Provider component :
-------------------------------------------------
*
*
*  

7) Examples of Provider component :
-----------------------------------
*
*
__________________________________________________________________________________


 16. <<<<<<<<< ReactJS - Animation >>>>>>>>>
          
         (A) React Transition Group :
             ````````````````````````
               * The library exposes minimum possible state of every
                 element and they are given below -
                      1) Entering
                      2) Entered
                      3) Exiting
                      4) Exited 
          
         (B) Transition :
             `````````````         
              * Next, install React Transition Group library ,
                 _______________________________________________
                |  cd /go/to/project                            |
                |  npm install react-transition-group --save    |
                |_______________________________________________|
                  
       * Next, open the application in your favorite editor.

       * Next, create src folder under the root directory of the application.

       * Next, create components folder under src folder.

       * Next, create a file, HelloWorld.js under src/components folder and start
         editing.
 
       * Next, import React and animation library.  
     _______________________________________________________
    |  import React from 'react';                           |
    |  import { Transition } from 'react-transition-group'  | 
    |_______________________________________________________|  
          
           * Next, create the HelloWorld component.
        _________________________________________________
       |   class HelloWorld extends React.Component {    |
       |      constructor(props) {                       | 
       |         super(props);                           |
       |      }                                          |
       |   }                                             |
       |_________________________________________________|  
    
  - Next, define transition related styles as JavaScript objects in the 
    constructor.  
           ________________________________________________________________
          |  this.duration = 2000;                                         | 
          |  this.defaultStyle = {                                         |
          |     transition: `opacity ${this.duration}ms ease-in-out`,      |
          |     opacity: 0,                                                |
          |  }                                                             |
          |  this.transitionStyles = {                                     |
          |     entering: { opacity: 1 },                                  |
          |     entered: { opacity: 1 },                                   |
          |     exiting: { opacity: 0 },                                   | 
          |     exited: { opacity: 0 },                                    | 
          |  };                                                            |
          |________________________________________________________________| 
              Here,

                + "defaultStyles" sets the transition animation
                + "transitionStyles" set the styles for various states 
            
     * Next, set the initial state for the element in the constructor.
         ____________________________
        |  this.state = {            |
        |     inProp: true           | 
        |  }                         |
        |____________________________| 
   
   * Next, simulate the animation by changing the inProp values every 3 seconds.
       ____________________________________________
      |  setInterval(() => {                       | 
      |     this.setState((state, props) => {      |
      |        let newState = {                    | 
      |           inProp: !state.inProp            |
      |        };                                  |
      |        return newState;                    |
      |     })                                     |    
      |  }, 3000);                                 | 
      |____________________________________________|
    
           * Next, create a render function ,
       ___________________
      |  render() {       |
      |     return (      | 
      |     );            |  
      |  }                |
      |___________________|
    
       * Next, add "Transition" component. Use "this.state.inProp" for in prop
         and "this.duration" for "timeout prop". Transition component expects
         a function, which returns the user interface. It is basically a Render
         props.  
       ________________________________________________________________________
      |  render() {                                                            | 
      |     return (                                                           |
      |        <Transition in={this.state.inProp} timeout={this.duration}>     |
      |           {state => ({                                                 |
      |              ... component's user interface.                           |
      |           })                                                           |
      |        </Transition>                                                   | 
      |     );                                                                 |
      |  }                                                                     |
      |________________________________________________________________________|
   
   * Next, write the components user interface inside a container and set the 
     "defaultStyle" and "transitionStyles" for the container.
   ________________________________________________________________________
  |  render() {                                                            |
  |     return (                                                           |
  |        <Transition in={this.state.inProp} timeout={this.duration}>     |     
  |           {state => (                                                  |
  |              <div style={{                                             | 
  |                 ...this.defaultStyle,                                  | 
  |                 ...this.transitionStyles[state]                        |
  |              }}>                                                       | 
  |                 <h1>Hello World!</h1>                                  |
  |              </div>                                                    |
  |          )}                                                            |
  |       </Transition>                                                    |
  |    );                                                                  |
  |  }                                                                     |
  |________________________________________________________________________|
          
      * Finally, expose the component.
         ________________________________
        |  export default HelloWorld     |
        |________________________________|

  - The complete source code of the component is as follows −
 __________________________________________________________________
| import React from "react";                                       |
| import { Transition } from 'react-transition-group';             |
|                                                                  | 
| class HelloWorld extends React.Component {                       |
|    constructor(props) {                                          |
|       super(props);                                              | 
|       this.duration = 2000;                                      |
|       this.defaultStyle = {                                      |
|          transition: `opacity ${this.duration}ms ease-in-out`,   |
|          opacity: 0,                                             |
|       }                                                          |
|       this.transitionStyles = {                                  |
|          entering: { opacity: 1 },                               |
|          entered: { opacity: 1 },                                |
|          exiting: { opacity: 0 },                                |
|          exited: { opacity: 0 },                                 |
|       };                                                         |
|       this.state = {                                             |
|          inProp: true                                            |
|       }                                                          |
|       setInterval(() => {                                        |
|          this.setState((state, props) => {                       |
|             let newState = {                                     |
|                inProp: !state.inProp                             |
|             };                                                   |
|             return newState;                                     |
|          })                                                      | 
|       }, 3000);                                                  |
|    }                                                             | 
|    render() {                                                    |_____
|       return (                                                         |
|          <Transition in={this.state.inProp} timeout={this.duration}>   |
|             {state => (                                                | 
|                <div style={{                                           | 
|                   ...this.defaultStyle,                                |  
|                   ...this.transitionStyles[state]                      |
|                }}>                                                     |
|                   <h1>Hello World!</h1>                                |
|                </div>                                                  |
|             )}                                                         |
|          </Transition>                                                 | 
|       );                                                               |
|    }                                                                   |
| }                                                                      |        
| export default HelloWorld;                                             | 
|________________________________________________________________________|  
     
   * Next, create a file, "index.js" under the src folder and use 
     "HelloWorld" component.
        ______________________________________________________
       |  import React from 'react';                          |
       |  import ReactDOM from 'react-dom';                   | 
       |  import HelloWorld from './components/HelloWorld';   |
       |                                                      |
       |  ReactDOM.render(                                    |
       |     <React.StrictMode                                |
       |        <HelloWorld /                                 | 
       |     </React.StrictMode   ,                           |
       |     document.getElementById('root')                  |
       |  );                                                  |
       |______________________________________________________|

   * Finally, create a public folder under the root folder and create 
     "index.html" file. 
      _____________________________________________________________________
     |  <!DOCTYPE html>                                                    |
     |  <html lang="en">                                                   |
     |     <head>                                                          |
     |        <meta charset="utf-8">                                       | 
     |        <title>React Containment App</title>                         | 
     |     </head>                                                         | 
     |     <body>                                                          | 
     |        <div id="root"></div>                                        |
     |        <script type="text/JavaScript" src="./index.js"></script>    |
     |     </body>                                                         |
     |  </html>                                                            |
     |_____________________________________________________________________|
 
       *  Next, serve the application using npm command. 
                 ________________________
                |  npm start             |
                |________________________|
    * Next, open the browser and enter http://localhost:3000 in the address
      and press enter. 
    * Clicking the remove link will remove the item from redux store. 
           ___________________
          | Hello World!      |
          |___________________|
    
          (C)  CSSTransition -
               ````````````````
      ______________________________________
     |  .hello-enter {                      |
     |     opacity: 0;                      |
     |  }                                   |
     |  .hello-enter-active {               |
     |     opacity: 1;                      | 
     |     transition: opacity 200ms;       |
     |  }                                   |
     |  .hello-exit {                       |
     |     opacity: 1;                      | 
     |  }                                   | 
     |  .hello-exit-active {                |
     |     opacity: 0;                      |
     |     transition: opacity 200ms;       |
     |  }                                   |
     |______________________________________|

   * Let us create a new component HelloWorldCSSTransition using CSSTransition
     component.

   * First, open our react-animation-app application in your favorite editor.

   * Next, create a new file, "HelloWorldCSSTransition.css" under 
     "src/components" folder and enter transition classes.
     ___________________________________________________
    |  .hello-enter {                                   |
    |     opacity: 1;                                   | 
    |     transition: opacity 2000ms ease-in-out;       |
    |  }                                                |
    |  .hello-enter-active {                            |
    |     opacity: 1;                                   |
    |     transition: opacity 2000ms ease-in-out;       |  
    |  }                                                |
    |  .hello-exit {                                    |
    |     opacity: 0;                                   | 
    |     transition: opacity 2000ms ease-in-out;       |
    |  }                                                |
    |  .hello-exit-active {                             | 
    |     opacity: 0;                                   |
    |     transition: opacity 2000ms ease-in-out;       |
    |  }                                                |
    |___________________________________________________| 
      
   * Next, create a new file, "HelloWorldCSSTransition.js" under 
     "src/components" folder and start editing.

   * Next, import "React" and animation library.
      __________________________________________________________
     |  import React from 'react';                              |
     |  import { CSSTransition } from 'react-transition-group'  |
     |__________________________________________________________| 
  
   * Next, import "HelloWorldCSSTransition.css." 
      ____________________________________________
     |  import './HelloWorldCSSTransition.css'    | 
     |____________________________________________|
   
   * Next, create the "HelloWorld" component.
       _______________________________________________________________
      |  class HelloWorldCSSTransition extends React.Component {      |
      |     constructor(props) {                                      | 
      |        super(props);                                          |
      |     }                                                         |
      |  }                                                            |
      |_______________________________________________________________| 
  
   *  Next, define duration of the transition in the constructor ,
        __________________________
       |  this.duration = 2000;   |
       |__________________________| 

   * Next, set the initial state for the element in the constructor.
        _______________________________
       |  this.state = {               | 
       |     inProp: true              |   
       |  }                            |
       |_______________________________|
  
        * Next, simulate the animation by changing the inProp values
          every 3 seconds. 
           ________________________________________________
          |  setInterval(() => {                           |
          |     this.setState((state, props) => {          |  
          |        let newState = {                        |
          |           inProp: !state.inProp                |
          |        };                                      |
          |        return newState;                        | 
          |     })                                         | 
          |  }, 3000);                                     |
          |________________________________________________| 
      
       * Next, create a render function.
            _________________________
           |  render() {             |
           |     return (            | 
           |     );                  |
           |  }                      | 
           |_________________________| 
    
     * Next, add "CSSTransition" component. Use "this.state.inProp" for in prop,
       "this.duration" for "timeout" prop and 'hello' for "classNames" prop.
       "CSSTransition" component expects user interface as child prop. 
     ___________________________________________________________________________
    |   render() {                                                              |
    |      return (                                                             | 
    |         <CSSTransition in={this.state.inProp} timeout={this.duration}     |
    |            classNames="hello">                                            |
    |            // ... user interface code ...                                 |
    |         </CSSTransition>                                                  |
    |      );                                                                   |
    |   }                                                                       |
    |___________________________________________________________________________|
    
   * Next, write the components user interface ,    
       _________________________________________________________________________
      |  render() {                                                             |
      |     return (                                                            |
      |         <CSSTransition in={this.state.inProp} timeout={this.duration}   | 
      |        classNames="hello">                                              |
      |        <div>                                                            |
      |            <h1>Hello World!</h1>                                        | 
      |        </div>                                                           |
      |         </CSSTransition>                                                |
      |     );                                                                  |
      |  }                                                                      |
      |_________________________________________________________________________| 
  
       * Finally, expose the component. 
           ____________________________________________
          |  export default HelloWorldCSSTransition;   |
          |____________________________________________|
       
       * The complete source code of the component is given below −
  ______________________________________________________________________________
 |  import React from 'react';                                                  |
 |  import { CSSTransition } from 'react-transition-group'                      |
 |  import './HelloWorldCSSTransition.css'                                      |
 |                                                                              | 
 |  class HelloWorldCSSTransition extends React.Component {                     |
 |     constructor(props) {                                                     |
 |        super(props);                                                         |
 |        this.duration = 2000;                                                 |
 |        this.state = {                                                        |
 |           inProp: true                                                       |
 |        }                                                                     |
 |        setInterval(() => {                                                   |  
 |           this.setState((state, props) => {                                  |
 |              let newState = {                                                |
 |                 inProp: !state.inProp                                        |
 |              };                                                              |
 |              return newState;                                                |
 |           })                                                                 |
 |        }, 3000);                                                             |
 |     }                                                                        |
 |     render() {                                                               |
 |        return (                                                              |
 |           <CSSTransition in={this.state.inProp} timeout={this.duration}      |
 |              classNames="hello">                                             |
 |              <div>                                                           |
 |                 <h1>Hello World!</h1>                                        |
 |              </div>                                                          |
 |           </CSSTransition>                                                   |
 |        );                                                                    |
 |     }                                                                        |
 |  }                                                                           | 
 |  export default HelloWorldCSSTransition;                                     |
 |______________________________________________________________________________|
     
     * Next, serve the application using npm command. 
              ____________________
             |  npm start         |
             |____________________| 

     * Next, open the browser and enter http://localhost:3000 in the address bar
       and press enter.

     * The message will fade in and out for every 3 seconds.
             ________________________
            |  Hello World!          |
            |________________________|
      
      (D) TransitionGroup :
          ``````````````````
  * "TransitionGroup" is a container component, which manages multiple transition
    component in a list. 
    For example, while each item in a list use CSSTransition, "TransitionGroup"
    can be used to group all the item for proper animation.
      ______________________________________________________________________
     |  <TransitionGroup>                                                   |
     |     {items.map(({ id, text }) => (                                   |
     |        <CSSTransition key={id} timeout={500} classNames="item" >     |
     |           <Button                                                    |
     |              onClick={() =>                                          | 
     |                 setItems(items =>                                    |
     |                    items.filter(item => item.id !== id)              |
     |                 )                                                    | 
     |              }                                                       |
     |              >                                                       | 
     |              &times;                                                 |
     |           </Button>                                                  |
     |           {text}                                                     |
     |        </CSSTransition>                                              |
     |     ))}                                                              |
     |  </TransitionGroup>                                                  |
     |______________________________________________________________________|      
__________________________________________________
      ReactJS - Animation                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Animation
                                                                                        
2) Definition of ReactJS - Animation ?
--------------------------------------
*
 
3) What is ReactJS - Animation About ?
--------------------------------------
*
*

4) What does ReactJS - Animation Do ?
-------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Animation :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Animation :
--------------------------------------------------
*
*
*  

7) Examples of ReactJS - Animation :
------------------------------------
*
*
_________________________________________________________________________________

    (A) <<<<<<<<<    React Transition Group :   >>>>>>>>>
                     ````````````````````````
__________________________________________________
                                                  |
          React Transition Group :                |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React Transition Group :
                                                                                        
2) Definition of React Transition Group ?
-----------------------------------------
*
 
3) What is React Transition Group About ?
-----------------------------------------
*
*

4) What does React Transition Group Do ?
----------------------------------------
*
*

5) Advantages/Benefits of React Transition Group :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of React Transition Group :
-----------------------------------------------------
*
*
*  

7) Examples of React Transition Group :
---------------------------------------
*
*
_________________________________________________________________________________

   1)   <<<<<<<<<   Entering   >>>>>>>>>
__________________________________________________
                                                  |
       Entering                                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Entering
                                                                                        
2) Definition of Entering ?
---------------------------
*
 
3) What is Entering About ?
---------------------------
*
*

4) What does Entering Do ?
--------------------------
*
*

5) Advantages/Benefits of Entering :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Entering :
---------------------------------------
*
*
*  

7) Examples of Entering :
-------------------------
*
*
_________________________________________________________________________________

   2)   <<<<<<<<< Entered >>>>>>>>>
__________________________________________________
   Entered                                        |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Entered
                                                                                        
2) Definition of Entered ?
--------------------------
*
 
3) What is Entered About ?
--------------------------
*
*

4) What does Entered Do ?
-------------------------
*
*

5) Advantages/Benefits of Entered :
-----------------------------------
*
*
*

6) Disadvantages/Drawback of Entered :
--------------------------------------
*
*
*  

7) Examples of Entered :
------------------------
*
*
__________________________________________________________________________________

   3)   <<<<<<<<< Exiting >>>>>>>>>
__________________________________________________
  Exiting                                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Exiting
                                                                                        
2) Definition of Exiting ?
--------------------------
*
 
3) What is Exiting About ?
--------------------------
*
*

4) What does Exiting Do ?
-------------------------
*
*

5) Advantages/Benefits of Exiting :
-----------------------------------
*
*
*

6) Disadvantages/Drawback of Exiting :
--------------------------------------
*
*
*  

7) Examples of Exiting :
------------------------
*
*
__________________________________________________________________________________

   4)   <<<<<<<<< Exited >>>>>>>>>
__________________________________________________
   Exited                                         |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Exited
                                                                                        
2) Definition of Exited ?
-------------------------
*
 
3) What is Exited About ?
-------------------------
*
*

4) What does Exited Do ?
------------------------
*
*

5) Advantages/Benefits of Exited :
----------------------------------
*
*
*

6) Disadvantages/Drawback of Exited :
-------------------------------------
*
*
*  

7) Examples of Exited :
-----------------------
*
*
_________________________________________________________________________________

   (B)   <<<<<<<<<   Transition :   >>>>>>>>>
__________________________________________________
   Transition :                                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Transition :
                                                                                        
2) Definition of Transition ?
-----------------------------
*
 
3) What is Transition About ?
-----------------------------
*
*

4) What does Transition Do ?
----------------------------
*
*

5) Advantages/Benefits of Transition :
--------------------------------------
*
*
*

6) Disadvantages/Drawback of Transition :
-----------------------------------------
*
*
*  

7) Examples of Transition :
---------------------------
*
*
_________________________________________________________________________________

 17. <<<<<<<<< ReactJS - Testing >>>>>>>>>

   * The 'react-testing-library' allows the components to be checked in isolation.

   * It can be installed in the application using below command −
   ________________________________________________________________________
  |  npm install --save @testing-library/react @testing-library/jest-dom   |
  |________________________________________________________________________|
        
           (A) Create React app :
               ```````````````````
               * using Create React App is just a command away , 
            _______________________________________
           |  cd /go/to/react/application          | 
           |  npm test                             |
           |_______________________________________|
     
    * The npm test command is similar to npm build command. Both re-compiles 
      as and when the developer changes the code.
      Once the command is executed in the command prompt, it emits below
      questions.
    __________________________________________________________________
   |  No tests found related to files changed since last commit.      |
   |  Press `a` to run all tests, or run Jest with `--watchAll`.      |         
   |                                                                  |
   | Watch Usage                                                      |
   | › Press a to run all tests.                                      |
   | › Press f to run only failed tests.                              |
   | › Press q to quit watch mode.                                    |
   | › Press p to filter by a filename regex pattern.                 |      
   | › Press t to filter by a test name regex pattern.                |
   | › Press Enter to trigger a test run.                             |
   |__________________________________________________________________|
      
   * Pressing a will try to run all the test script and finally summarises the
     result as shown below - 
       ____________________________________________
      |  Test Suites: 1 passed, 1 total            |
      |  Tests: 1 passed, 1 total                  | 
      |  Snapshots: 0 total                        |
      |  Time: 4.312 s, estimated 12 s             |    
      |  Ran all test suites.                      |
      |                                            |
      |  Watch Usage: Press w to show more.        | 
      |____________________________________________|
  
   (B) Testing in a custom application :
       `````````````````````````````````` 
       * Let us write a custom React application using "Rollup bundler" and test
         it using 'React testing library' and "jest test" runner in this chapter.
         
       * First, create a new react application, "react-test-app" using "Rollup
         bundler" by following instruction in Creating a React application 
         chapter. 
         
    (C)  Next, install the testing library ,
   ________________________________________________________________________
  |  cd /go/to/react-test-app                                              | 
  |  npm install --save @testing-library/react @testing-library/jest-dom   |
  |________________________________________________________________________|
     
     * Next, open the application in your favorite editor.
     * Next, create a file, HelloWorld.test.js under src/components folder to
       write test for "HelloWorld" component and start editing. 

    (D) Next, import react library.
          _____________________________________
         |  import React from 'react';         |
         |_____________________________________|
    
    (E) Next, import the testing library ,
  ________________________________________________________________________________________________
 |  import { render, screen } from '@testing-library/react'; import '@testing-library/jest-dom';  |
 |________________________________________________________________________________________________| 

     * Next, import our HelloWorld component.
        ___________________________________________
       |  import HelloWorld from './HelloWorld';   |
       |___________________________________________|

   * Next, write a test to check the existence of 
     Hello World text in the document.
     _________________________________________________________
    |  test('test scenario 1', () => {                        |
    |     render(<HelloWorld />);                             |
    |     const element = screen.getByText(/Hello World/i);   |
    |     expect(element).toBeInTheDocument();                |
    |  });                                                    |
    |_________________________________________________________| 
      
    The complete source code of the test code is given below −
      _______________________________________________________________
     |  import React from 'react';                                   |
     |  import { render, screen } from '@testing-library/react';     |
     |  import '@testing-library/jest-dom';                          |
     |  import HelloWorld from './HelloWorld';                       | 
     |                                                               |
     |  test('test scenario 1', () => {                              |
     |     render(<HelloWorld />);                                   |
     |     const element = screen.getByText(/Hello World/i);         |
     |     expect(element).toBeInTheDocument();                      |
     |  });                                                          |
     |_______________________________________________________________|
       
  * Next, install jest test runner, if it is not installed already 
    in the system.
         ______________________________
        |  npm install jest -g         |
        |______________________________|

  * Next, run jest command in the root folder of the application.
           __________
          |  jest    |
          |__________|
    
   * Next, run jest command in the root folder of the application.
       _________________________________________________
      |  PASS  src/components/HelloWorld.test.js        |
      |     √ test scenario 1 (29 ms)                   |
      |                                                 |
      |  Test Suites: 1 passed, 1 total                 | 
      |  Tests:       1 passed, 1 total                 |
      |  Snapshots:   0 total                           |
      |  Time:        5.148 s                           |
      |  Ran all test suites.                           |
      |_________________________________________________|
__________________________________________________
    ReactJS - Testing                             |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Testing
                                                                                        
2) Definition of ReactJS - Testing ?
------------------------------------
*
 
3) What is ReactJS - Testing About ?
------------------------------------
*
*

4) What does ReactJS - Testing Do ?
-----------------------------------
*
*

5) Advantages/Benefits of ReactJS - Testing :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Testing :
------------------------------------------------
*
*
*  

7) Examples of ReactJS - Testing :
----------------------------------
*
*
_________________________________________________________________________________

   (A)   <<<<<<<<<   Create React app :   >>>>>>>>>
                     ``````````````````
__________________________________________________
                                                  |
          Create React app :                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Create React app :
                                                                                        
2) Definition of Create React app ?
-----------------------------------
*
 
3) What is Create React app About ?
-----------------------------------
*
*

4) What does Create React app Do ?
----------------------------------
*
*

5) Advantages/Benefits of Create React app :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of Create React app :
-----------------------------------------------
*
*
*  

7) Examples of Create React app :
---------------------------------
*
*
__________________________________________________________________________________

   (B)   <<<<<<<<<   Testing in a custom application :   >>>>>>>>>
                     `````````````````````````````````
__________________________________________________
                                                  |
       Testing in a custom application :          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Testing in a custom application :
                                                                                        
2) Definition of Testing in a custom application ?
--------------------------------------------------
*
 
3) What is Testing in a custom application About ?
--------------------------------------------------
*
*

4) What does Testing in a custom application Do ?
-------------------------------------------------
*
*

5) Advantages/Benefits of Testing in a custom application :
-----------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Testing in a custom application :
--------------------------------------------------------------
*
*
*  

7) Examples of Testing in a custom application :
------------------------------------------------
*
*
__________________________________________________________________________________

   (C)   <<<<<<<<<   Next, install the testing library ,  >>>>>>>>>
__________________________________________________
                                                  |
     Next, install the testing library ,          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Next, install the testing library ,
                                                                                        
2) Definition of Next, install the testing library , ?
------------------------------------------------------
*
 
3) What is Next, install the testing library , About ?
------------------------------------------------------
*
*

4) What does Next, install the testing library , Do ?
-----------------------------------------------------
*
*

5) Advantages/Benefits of Next, install the testing library , :
---------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Next, install the testing library , :
------------------------------------------------------------------
*
*
*  

7) Examples of Next, install the testing library , :
----------------------------------------------------
*
*
_________________________________________________________________________________

   (D)   <<<<<<<<<  Next, import react library.  >>>>>>>>>
__________________________________________________
                                                  |
    Next, import react library.                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Next, import react library.
                                                                                        
2) Definition of Next, import react library. ?
----------------------------------------------
*
 
3) What is Next, import react library. About ?
----------------------------------------------
*
*

4) What does Next, import react library. Do ?
---------------------------------------------
*
*

5) Advantages/Benefits of Next, import react library. :
-------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Next, import react library. :
----------------------------------------------------------
*
*
*  

7) Examples of Next, import react library. :
--------------------------------------------
*
*
__________________________________________________________________________________

   (E)   <<<<<<<<< Next, import the testing library , >>>>>>>>>
__________________________________________________
                                                  |
      Next, import the testing library ,          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Next, import the testing library ,
                                                                                        
2) Definition of Next, import the testing library , ?
-----------------------------------------------------
*
 
3) What is Next, import the testing library , About ?
-----------------------------------------------------
*
*

4) What does Next, import the testing library , Do ?
----------------------------------------------------
*
*

5) Advantages/Benefits of Next, import the testing library , :
--------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Next, import the testing library , :
-----------------------------------------------------------------
*
*
*  

7) Examples of Next, import the testing library , :
---------------------------------------------------
*
*
_________________________________________________________________________________

 18. <<<<<<<<< ReactJS - CLI Commands >>>>>>>>>
 
   (A) Creating a new application :
       `````````````````````````````
        * Create React App provides multiple ways to create React application :
             1) Using npx script :
      ________________________________________________
     |  npx create-react-app <react-app-name>         | 
     |  npx create-react-app hello-react-app          |
     |________________________________________________|
              
             2) Using npm package manager :
     ___________________________________________
    |  npm init react-app <react-app-name>      |
    |  npm init react-app hello-react-app       |
    |___________________________________________|
              
             3) Using yarn package manager :
    _____________________________________________
   |  yarn init react-app <react-app-name>       |
   |  yarn init react-app hello-react-app        |
   |_____________________________________________|
      
   (B) Selecting a template :
       ```````````````````````
    * Create React App allows the users to select the template through –template
      command line switch :
        __________________________________________________
       |  create-react-app my-app --template typescript   |
       |__________________________________________________|
                            ^
                            ^
                            ^
 * Above command will create react app using "cra-template-typescript" :
      
   (C) Installing a dependency :
       ``````````````````````````
 * React dependency package can be installed using normal "npm" or "yarn" package
   from npm server :
         1) Using "npm" package manager :	
     _________________________________________
    |  npm install --save react-router-dom    |
    |_________________________________________| 

         2) Using "yarn" package manager :
     _______________________________
    |  yarn add react-router-dom    |
    |_______________________________| 
         
   (D) Running the application :
       `````````````````````````` 
      * React application can be started using npm or yarn command depending               on the package manager used in the project :
              1) Using "npm" package manager : 
                   _________________
                  |  npm start      |
                  |_________________|
 
              2) Using "yarn" package manager :
                  ___________________
                 |  yarn start       |
                 |___________________| 

 * To run the application in secure mode (HTTPS), set an environment variable,
   HTTPS and set it to true before starting the application, 

 * For example, in windows command prompt (cmd.exe),
   the below command set HTTPS and starts the application is HTTPS mode :
      ________________________________
     |   set HTTPS=true && npm start  |
     |________________________________|
__________________________________________________
     ReactJS - CLI Commands                       |
                                                  |                    
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - CLI Commands
                                                                                        
2) Definition of ReactJS - CLI Commands ?
-----------------------------------------
*
 
3) What is ReactJS - CLI Commands About ?
-----------------------------------------
*

4) What does ReactJS - CLI Commands Do ?
----------------------------------------
*
*

5) Advantages/Benefits of ReactJS - CLI Commands :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - CLI Commands :
-----------------------------------------------------
*
*
*  

7) Examples of ReactJS - CLI Commands :
---------------------------------------
*
*
__________________________________________________________________________________

   (A)  <<<<<<<<<   Creating a new application :  >>>>>>>>>
                    ````````````````````````````
__________________________________________________
   Creating a new application :                   |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Creating a new application :
                                                                                        
2) Definition of Creating a new application ?
---------------------------------------------
*
 
3) What is Creating a new application About ?
---------------------------------------------
*
*

4) What does Creating a new application Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of Creating a new application :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Creating a new application :
---------------------------------------------------------
*
*
*  

7) Examples of Creating a new application :
-------------------------------------------
*
*
_________________________________________________________________________________

      1) <<<<<<<<< Using npx script : >>>>>>>>>
__________________________________________________
                                                  |
        Using npx script :                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Using npx script :
                                                                                        
2) Definition of Using npx script ?
-----------------------------------
*
 
3) What is Using npx script About ?
-----------------------------------
*
*

4) What does Using npx script Do ?
----------------------------------
*
*

5) Advantages/Benefits of Using npx script :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of Using npx script :
-----------------------------------------------
*
*
*  

7) Examples of Using npx script :
---------------------------------
*
*
_________________________________________________________________________________

    2) <<<<<<<<< Using npm package manager : >>>>>>>>>
__________________________________________________
                                                  |
    Using npm package manager :                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Using npm package manager :
                                                                                        
2) Definition of Using npm package manager ?
--------------------------------------------
*
 
3) What is Using npm package manager About ?
--------------------------------------------
*
*

4) What does Using npm package manager Do ?
-------------------------------------------
*
*

5) Advantages/Benefits of Using npm package manager :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Using npm package manager :
--------------------------------------------------------
*
*
*  

7) Examples of Using npm package manager :
------------------------------------------
*
*
__________________________________________________________________________________

    3)   <<<<<<<<< Using yarn package manager : >>>>>>>>>
__________________________________________________
                                                  |
     Using yarn package manager :                 |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Using yarn package manager :
                                                                                        
2) Definition of Using yarn package manager ?
---------------------------------------------
*
 
3) What is Using yarn package manager About ?
---------------------------------------------
*
*

4) What does Using yarn package manager Do ?
--------------------------------------------
*
*

5) Advantages/Benefits of Using yarn package manager :
------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Using yarn package manager :
---------------------------------------------------------
*
*
*  

7) Examples of Using yarn package manager :
-------------------------------------------
*
*
_________________________________________________________________________________

   (B)  <<<<<<<<<   Selecting a template :   >>>>>>>>>
                    ``````````````````````
__________________________________________________
                                                  |
          Selecting a template :                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Selecting a template :
                                                                                        
2) Definition of Selecting a template ?
---------------------------------------
*
 
3) What is Selecting a template About ?
---------------------------------------
*
*

4) What does Selecting a template Do ?
--------------------------------------
*
*

5) Advantages/Benefits of Selecting a template :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Selecting a template :
---------------------------------------------------
*
*
*  

7) Examples of Selecting a template :
-------------------------------------
*
*
_________________________________________________________________________________

   (C) <<<<<<<<<   Installing a dependency :   >>>>>>>>>
                   `````````````````````````
__________________________________________________
                                                  |
      Installing a dependency :                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Installing a dependency :
                                                                                        
2) Definition of Installing a dependency ?
------------------------------------------
*
 
3) What is Installing a dependency About ?
------------------------------------------
*
*

4) What does Installing a dependency Do ?
-----------------------------------------
*
*

5) Advantages/Benefits of Installing a dependency :
---------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Installing a dependency :
------------------------------------------------------
*
*
*  

7) Examples of Installing a dependency :
----------------------------------------
*
*
__________________________________________________________________________________

   (D)  <<<<<<<<<    Running the application :   >>>>>>>>>
                     `````````````````````````
__________________________________________________
                                                  |
      Running the application :                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Running the application :
                                                                                        
2) Definition of Running the application ?
------------------------------------------
*
 
3) What is Running the application About ?
------------------------------------------
*
*

4) What does Running the application Do ?
-----------------------------------------
*
*

5) Advantages/Benefits of Running the application :
---------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Running the application :
------------------------------------------------------
*
*
*  

7) Examples of Running the application :
----------------------------------------
*
*
_________________________________________________________________________________

 19. <<<<<<<<< ReactJS - Building and Deployment >>>>>>>>>
         
        (A) Building :
            ```````````
  * Once a React application development is done, application needs to be
    BUNDLED and DEPLOYED to a PRODUCTION SERVER.
  * Let us learn the 'command' available to 'build and deploy' 
    the application in this chapter.
  * A single command is enough to create a production build of the application :
   _______________________________________________________________________
  |  npm run build                                                        |
  |  > expense-manager@0.1.0 build path\to\expense-manager                |
  |  > react-scripts build                                                | 
  |                                                                       |  
  |  Creating an optimized production build...                            |
  |  Compiled with warnings.                                              |
  |                                                                       |
  |  File sizes after gzip:                                               |
  |                                                                       | 
  |     41.69 KB   build\static\js\2.a164da11.chunk.js                    | 
  |      2.24 KB   build\static\js\main.de70a883.chunk.js                 |
  |      1.4  KB   build\static\js\3.d8a9fc85.chunk.js                    |
  |      1.17 KB   build\static\js\runtime-main.560bee6e.js               |
  |    493     B   build\static\css\main.e75e7bbe.chunk.css               |
  |                                                                       |
  |  The project was built assuming it is hosted at /.                    | 
  |  You can control this with the homepage field in your package.json.   | 
  |                                                     __________________|
  |  The build folder is ready to be deployed.         |
  |  You may serve it with a static server:            | 
  |                                                    |
  |     npm install -g serve                           |
  |     serve -s build                                 |
  |                                                    |
  |  Find out more about deployment here:              |
  |                                                    |
  |     https://cra.link/deployment                    |
  |____________________________________________________|
  
   * Once the application is build, the application is available
     under "build/static" folder.
   
   * By default, profiling option is disable and can be enabled through
     "–profile" command line option.
   * "–profile|" will include profiling information in the code. 
   * The profiling information can be used along with 'React DevTools' to 
     analyse the application. 
  
   (B) Deployment :
       ````````````` 
  * Once the application is build, it can be deployed to any web server.
  * Let us learn how to deploy a React application in this chapter :
     
         1) Local deployment :
            ~~~~~~~~~~~~~~~~~~~
              * Local deployment can be done using serve package.
              * Let us first install serve package using below command −
                  ____________________________
                 |  npm install -g server     |
                 |____________________________| 

      * To start the application using serve, use the below command −
          _______________________________
         |  cd /go/to/app/root/folder    |
         |  serve -s build               |
         |_______________________________|

     * By default, serve serve the application using port 5000.
     * The application can be viewed @ http://localhost:5000.
    
      2) Production deployment :
         ~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Production deployment can be easily done by copying the files under
     build/static folder to the production application’s root directory.

   * It will work in all web server including Apache, IIS, Nginx, etc.
       
      3) Relative path :
         ~~~~~~~~~~~~~~~~
   * By default, the production build is created assuming that the application
     will be hosted in the root folder of a web application.
   * If the application needs to be hosted in a subfolder, then use the 
     below configuration in the package.json and then build the application :
    _______________________________________________________________________
   |  { ... "homepage": "http://domainname.com/path/to/subfolder", ... }   |
   |_______________________________________________________________________|
__________________________________________________
     ReactJS - Building and Deployment            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Building and Deployment
                                                                                        
2) Definition of ReactJS - Building and Deployment ?
----------------------------------------------------
*
 
3) What is ReactJS - Building and Deployment About ?
----------------------------------------------------
*
*

4) What does ReactJS - Building and Deployment Do ?
---------------------------------------------------
*
*

5) Advantages/Benefits of ReactJS - Building and Deployment :
-------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Building and Deployment :
----------------------------------------------------------------
*
*
*  

7) Examples of ReactJS - Building and Deployment :
--------------------------------------------------
*
*
__________________________________________________________________________________

   (A)  <<<<<<<<<   Building :   >>>>>>>>>
                    ``````````
__________________________________________________
                                                  |
           Building :                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Building :
                                                                                        
2) Definition of Building ?
---------------------------
*
 
3) What is Building About ?
---------------------------
*
*

4) What does Building Do ?
--------------------------
*
*

5) Advantages/Benefits of Building :
------------------------------------
*
*
*

6) Disadvantages/Drawback of Building :
---------------------------------------
*
*
*  

7) Examples of Building :
-------------------------
*
*
__________________________________________________________________________________

   (B)  <<<<<<<<< Deployment : >>>>>>>>>
                  ````````````
__________________________________________________
                                                  |
           Deployment :                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Deployment :
                                                                                        
2) Definition of Deployment ?
-----------------------------
*
 
3) What is Deployment About ?
-----------------------------
*
*

4) What does Deployment Do ?
----------------------------
*
*

5) Advantages/Benefits of Deployment :
--------------------------------------
*
*
*

6) Disadvantages/Drawback of Deployment :
-----------------------------------------
*
*
*  

7) Examples of Deployment :
---------------------------
*
*
_________________________________________________________________________________

   1)   <<<<<<<<< Local deployment : >>>>>>>>>
                  ``````````````````
__________________________________________________
                                                  |
        Local deployment :                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Local deployment :
                                                                                        
2) Definition of Local deployment ?
-----------------------------------
*
 
3) What is Local deployment About ?
-----------------------------------
*
*

4) What does Local deployment Do ?
----------------------------------
*
*

5) Advantages/Benefits of Local deployment :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of Local deployment :
-----------------------------------------------
*
*
*  

7) Examples of Local deployment :
---------------------------------
*
*
_________________________________________________________________________________

   2)  <<<<<<<<<   Production deployment :   >>>>>>>>>
                   ```````````````````````
__________________________________________________
                                                  |
         Production deployment :                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Production deployment :
                                                                                        
2) Definition of Production deployment ?
----------------------------------------
*
 
3) What is Production deployment About ?
----------------------------------------
*
*

4) What does Production deployment Do ?
---------------------------------------
*
*

5) Advantages/Benefits of Production deployment :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Production deployment :
----------------------------------------------------
*
*
*  

7) Examples of Production deployment :
--------------------------------------
*
*
__________________________________________________________________________________

    3)  <<<<<<<<<   Relative path :    >>>>>>>>>
__________________________________________________
   Relative path :                                |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Relative path :
                                                                                        
2) Definition of Relative path ?
--------------------------------
*
 
3) What is Relative path About ?
--------------------------------
*
*

4) What does Relative path Do ?
-------------------------------
*
*

5) Advantages/Benefits of Relative path :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of Relative path :
--------------------------------------------
*
*
*  

7) Examples of Relative path :
------------------------------
*
*
_________________________________________________________________________________

 20. <<<<<<<<< ReactJS - Example >>>>>>>>>
      
  * Let us create a sample expense manager application by applying the concepts
    that we have learned earlier :
    Some of the concepts are listed below −
      
       * React basics (component, jsx, props and state)

       * Router using react-router

       * Http client programming (Web API)

       * Form programming using Formik

       * Advanced state management using Redux

       * Async / await programming
           
 (A) Features :
     ```````````  
      Some of the features of our sample expense manager application are −

           * Listing all the expenses from the server
           * Add an expense item
           * Delete an expense item
      
           Here,

                1) Expense manager API

                2) Install necessary modules

                3) State management

                4) List expenses

                5) Add expense
__________________________________________________
     ReactJS - Example                            |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* ReactJS - Example
                                                                                        
2) Definition of ReactJS - Example ?
------------------------------------
*
 
3) What is ReactJS - Example About ?
------------------------------------
*
*

4) What does ReactJS - Example Do ?
-----------------------------------
*
*

5) Advantages/Benefits of ReactJS - Example :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of ReactJS - Example :
------------------------------------------------
*
*
*  

7) Examples of ReactJS - Example :
----------------------------------
*
*
__________________________________________________________________________________

    *  <<<<<<<<<  React basics (component, jsx, props and state)   >>>>>>>>>
__________________________________________________
                                                  |
  React basics (component, jsx, props and state)  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* React basics (component, jsx, props and state)
                                                                                        
2) Definition of React basics (component, jsx, props and state) ?
-----------------------------------------------------------------
*
 
3) What is React basics (component, jsx, props and state) About ?
-----------------------------------------------------------------
*
*

4) What does React basics (component, jsx, props and state) Do ?
----------------------------------------------------------------
*
*

5) Advantages/Benefits of React basics (component, jsx, props and state) :
--------------------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of React basics (component, jsx, props and state) :
-----------------------------------------------------------------------------
*
*
*  

7) Examples of React basics (component, jsx, props and state) :
---------------------------------------------------------------
*
*
__________________________________________________________________________________

     *   <<<<<<<<<   Router using react-router   >>>>>>>>>
__________________________________________________
                                                  |
   Router using react-router                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Router using react-router
                                                                                        
2) Definition of Router using react-router ?
--------------------------------------------
*
 
3) What is Router using react-router About ?
--------------------------------------------
*
*

4) What does Router using react-router Do ?
-------------------------------------------
*
*

5) Advantages/Benefits of Router using react-router :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Router using react-router :
--------------------------------------------------------
*
*
*  

7) Examples of Router using react-router :
------------------------------------------
*
*
__________________________________________________________________________________

     *   <<<<<<<<<   Http client programming (Web API)   >>>>>>>>>
__________________________________________________
                                                  |
    Http client programming (Web API)             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Http client programming (Web API)
                                                                                        
2) Definition of Http client programming (Web API) ?
----------------------------------------------------
*
 
3) What is Http client programming (Web API) About ?
----------------------------------------------------
*
*

4) What does Http client programming (Web API) Do ?
---------------------------------------------------
*
*

5) Advantages/Benefits of Http client programming (Web API) :
-------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Http client programming (Web API) :
----------------------------------------------------------------
*
*
*  

7) Examples of Http client programming (Web API) :
--------------------------------------------------
*
*
__________________________________________________________________________________

    *   <<<<<<<<<   Form programming using Formik  >>>>>>>>>
__________________________________________________
                                                  |
    Form programming using Formik                 |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Form programming using Formik
                                                                                        
2) Definition of Form programming using Formik ?
------------------------------------------------
*
 
3) What is Form programming using Formik About ?
------------------------------------------------
*
*

4) What does Form programming using Formik Do ?
-----------------------------------------------
*
*

5) Advantages/Benefits of Form programming using Formik :
---------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Form programming using Formik :
------------------------------------------------------------
*
*
*  

7) Examples of Form programming using Formik :
----------------------------------------------
*
*
_________________________________________________________________________________

   *  <<<<<<<<<   Advanced state management using Redux   >>>>>>>>>
__________________________________________________
                                                  |
     Advanced state management using Redux        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Advanced state management using Redux
                                                                                        
2) Definition of Advanced state management using Redux ?
--------------------------------------------------------
*
 
3) What is Advanced state management using Redux About ?
--------------------------------------------------------
*
*

4) What does Advanced state management using Redux Do ?
-------------------------------------------------------
*
*

5) Advantages/Benefits of Advanced state management using Redux :
-----------------------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Advanced state management using Redux :
--------------------------------------------------------------------
*
*
*  

7) Examples of Advanced state management using Redux :
------------------------------------------------------
*
*
_________________________________________________________________________________

    *   <<<<<<<<<   Async / await programming   >>>>>>>>>
__________________________________________________
                                                  |
    Async / await programming                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Async / await programming
                                                                                        
2) Definition of Async / await programming ?
--------------------------------------------
*
 
3) What is Async / await programming About ?
--------------------------------------------
*
*

4) What does Async / await programming Do ?
-------------------------------------------
*
*

5) Advantages/Benefits of Async / await programming :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Async / await programming :
--------------------------------------------------------
*
*
*  

7) Examples of Async / await programming :
------------------------------------------
*
*
_________________________________________________________________________________

   1)  <<<<<<<<<  Expense manager API >>>>>>>>>
   
 * First, create a new expense Rest API application by following instruction from
   "Http Client Programming -> Expense Rest API Server" and start the server. 

 * The expense server will be running at "http://localhost:8000".
        
        (A) Create a skeleton application :
            ````````````````````````````````
   * Open a terminal and go to your workspace.
             _________________________________
            |  > cd /go/to/your/workspace     | 
            |_________________________________| 
               
   * Next, create a new React application using Create React App tool.
          _________________________________________
         |  > create-react-app react-expense-app   |
         |_________________________________________| 
     
   * It will a create new folder react-expense-app with startup template code.
   * Next, go to expense-manager folder and install the necessary library.
       __________________________
      |  cd react-expense-app    |
      |  npm install             |
      |__________________________|
   
 * The npm install will install the necessary library under "node_modules" folder.
 * Delete all files under src and public folder. 
 * Next, create a folder, "components" under src to include our React components.
 * The final structure of the application will be as follows :
        ________________________________________________
       |    |-- package-lock.json                       |
       |    |-- package.json                            |
       |    `-- public                                  | 
       |       |-- index.html                           |
       |    `-- src                                     |
       |       |-- index.js                             |
       |       `-- components                           |
       |       |   |-- mycom.js                         |
       |       |   |-- mycom.css                        |
       |________________________________________________| 
  * Let us create our root component, "App", which will render the entire    
    application.

  * Create a file, "App.js" under components folder and write a simple
    component to emit "Hello World" message :
      ________________________________________________
     |  import React from "react";                    |
     |                                                |
     |  class App extends React.Component {           |    
     |     render() {                                 |
     |        return (                                |
     |           <div>                                | 
     |              <h1>Hello World!</h1>             |
     |           </div>                               |
     |        );                                      | 
     |     }                                          |
     |  }                                             |
     |  export default App;                           |  
     |________________________________________________|

  * Next, create our main file, "index.js" under src folder and call our
    newly created component. 
      _____________________________________________
     |  import React from 'react';                 |
     |  import ReactDOM from 'react-dom';          |   
     |                                             |
     |  import App from './components/App'         |   
     |                                             |
     |  ReactDOM.render(                           | 
     |     <React.StrictMode>                      |
     |        <App />                              |
     |     </React.StrictMode>,                    |
     |     document.getElementById('root')         |   
     |  );                                         |
     |_____________________________________________|
   
  * Next, create a html file, "index.html" (under public folder), which will be
    our entry point of the application :     
      _______________________________________
     |   <!DOCTYPE html>                     |
     |   <html lang="en">                    |
     |      <head>                           |
     |         <meta charset="utf-8">        |
     |         <title>Expense App</title>    |         
     |      </head>                          |
     |      <body>                           |
     |         <div id="root"></div>         |  
     |      </body>                          |
     |   </html>                             |
     |_______________________________________|  
   
     * Next, serve the application using npm command :
         _____________
        |  npm start  |
        |_____________|
    
     * Next, open the browser and enter "http://localhost:3000" in the 
       'address bar' and press enter : 
          __________________________________________
         |                                          |
         |    *   *       *            *            |
         |    *   *        *          *             |
         |    ***** ello    *   *    * orld  !      |
         |    *   *          * *  * *               |
         |    *   *           *    *                |
         |__________________________________________|
__________________________________________________
                                                  |
       Expense manager API                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Expense manager API
                                                                                        
2) Definition of Expense manager API ?
--------------------------------------
*
 
3) What is Expense manager API About ?
--------------------------------------
*
*

4) What does Expense manager API Do ?
-------------------------------------
*
*

5) Advantages/Benefits of Expense manager API :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of Expense manager API :
--------------------------------------------------
*
*
*  

7) Examples of Expense manager API :
------------------------------------
*
*
__________________________________________________________________________________

   2)  <<<<<<<<< Install necessary modules >>>>>>>>>
     
  *  The application uses below "third party react libraries" given below −
                                `````````````````````````````
        1) Redux
        2) React Redux
        3) React Router
        4) Formik
        5) Redux Thunk (for async fetch api)

  * Install all the libraries using npm package manager using the
    below command − 
    ____________________________________________________________________________
   |  npm install --save redux react-redux react-router-dom formik redux-thunk  |
   |____________________________________________________________________________|
       
      (A) Configure Router :
          ``````````````````` 
    * Next, create a new file, Home.js under src/components folder and write
      a basic Home component.
         _______________________________________________
        |  import React from "react";                   | 
        |                                               | 
        |  class Home extends React.Component {         |
        |     render() {                                | 
        |        return (                               | 
        |           <div>                               | 
        |              <h1>Home</h1>                    |
        |           </div>                              |
        |        );                                     | 
        |     }                                         |
        |  }                                            |
        |  export default Home;                         |
        |_______________________________________________|
    
   * Next, create a new file, "ExpenseEntryItemForm.js" under "src/components"
     folder and write a basic "ExpenseEntryItemForm" component : 
       _____________________________________________________________
      |  import React from "react";                                 |
      |                                                             |
      |  class ExpenseEntryItemForm extends React.Component {       |
      |     render() {                                              | 
      |        return (                                             |
      |           <div>                                             |
      |              <h1>Expense list</h1>                          |
      |           </div>                                            | 
      |        );                                                   |
      |     }                                                       |
      |  }                                                          |
      |  export default ExpenseEntryItemForm;                       |
      |_____________________________________________________________|
   
   * Next, create a new file, "ExpenseEntryItemList.js" under "src/components"
     folder and write a basic "ExpenseEntryItemList" component.
        ____________________________________________________________
       |  import React from "react";                                |
       |                                                            |
       |  class ExpenseEntryItemList extends React.Component {      |
       |     render() {                                             | 
       |        return (                                            |
       |           <div>                                            | 
       |              <h1>Expense form</h1>                         |
       |           </div>                                           |
       |        );                                                  |
       |     }                                                      |
       |  }                                                         | 
       |  export default ExpenseEntryItemList;                      |
       |____________________________________________________________|

   * Create a new file, "App.css under src/components" folder and add generic 
     styles for the application :
     _________________________________________________
    |  html {                                         |       
    |     font-family: sans-serif;                    |          
    |  }                                              |
    |  a{                                             |
    |     text-decoration: none;                      |
    |  }                                              |
    |  p, li, a{                                      |
    |     font-size: 14px;                            |
    |  }                                              |
    |  nav ul {                                       |
    |     width: 100%;                                | 
    |     list-style-type: none;                      |
    |     margin: 0;                                  |
    |     padding: 0;                                 |
    |     overflow: hidden;                           |
    |     background-color: rgb(235,235,235);         |
    |  }                                              |
    |  nav li {                                       |
    |     float: left;                                | 
    |  }                                              | 
    |  nav li a {                                     |
    |     display: block;                             |
    |     color: black;                               | 
    |     text-align: center;                         |
    |     padding: 14px 16px;                         |
    |     text-decoration: none;                      |
    |     font-size: 16px;                            |
    |  }                                              |
    |  nav li a:hover {                               |
    |     background-color: rgb(187, 202, 211);       |_____________________  
    |  }                                                                    |
    |  input[type=text], input[type=number], input[type=date], select {     | 
    |     width: 100%;                                                      | 
    |     padding: 12px 20px;                   ____________________________|
    |     margin: 8px 0;                       |
    |     display: inline-block;               |
    |     border: 1px solid #ccc;              |
    |     border-radius: 4px;                  |
    |     box-sizing: border-box;              |
    |  }                                       | 
    |  input[type=submit] {                    | 
    |     width: 100%;                         |
    |     background-color: #4CAF50;           |
    |     color: white;                        |
    |     padding: 14px 20px;                  | 
    |     margin: 8px 0;                       |
    |     border: none;                        |
    |     border-radius: 4px;                  |
    |     cursor: pointer;                     |
    |  }                                       |  
    |  input[type=submit]:hover {              |
    |     background-color: #45a049;           |
    |  }                                       |
    |  input:focus {                           |
    |     border: 1px solid #d9d5e0;           |
    |  }                                       |
    |  #expenseForm div {                      |
    |     border-radius: 5px;                  |
    |     background-color: #f2f2f2;           |
    |     padding: 20px;                       |
    |  }                                       |      
    |  #expenseForm span {                     |
    |     color: red;                          |
    |  }                                       |
    |  html {                                  | 
    |     font-family: sans-serif;             | 
    |  }                                       |
    |  table {                                 |
    |     border-collapse: collapse;           |
    |     border: 2px solid rgb(200,200,200);  |
    |     letter-spacing: 1px;                 |
    |     font-size: 0.8rem;                   |
    |  }                                       |
    |  td, th {                                |
    |     border: 1px solid rgb(190,190,190);  |   
    |     padding: 10px 20px;                  |
    |  }                                       | 
    |  th {                                    |
    |     background-color: rgb(235,235,235);  |
    |  }                                       | 
    |  td, th {                                |
    |     text-align: left;                    | 
    |  }                                       |
    |  tr:nth-child(even) td {                 |
    |     background-color: rgb(250,250,250);  |
    |  }                                       |
    |  tr:nth-child(odd) td {                  |
    |     background-color: rgb(245,245,245);  |
    |  }                                       |    
    |  caption {                               | 
    |     padding: 10px;                       | 
    |  }                                       | 
    |  tr.highlight td {                       |
    |     background-color: #a6a8bd;           | 
    |  }                                       |
    |__________________________________________| 
      
   * Next, open "App.js" and import router dependencies : 
       __________________________________
      |   import {                       |
      |      BrowserRouter as Router,    |  
      |      Link,                       |
      |      Switch,                     |
      |      Route                       |
      |   } from 'react-router-dom';     | 
      |__________________________________| 
   
   * Next, import "App.css". 
       ____________________________
      |  import './App.css';       |
      |____________________________|
   
   * Next, import newly created components :
        ________________________________________________________________
       |  import Home from './Home';                                    |
       |  import ExpenseEntryItemList from './ExpenseEntryItemList';    |
       |  import ExpenseEntryItemForm from './ExpenseEntryItemForm';    |
       |________________________________________________________________|
   
    * Next, configure Router in the "App" component :
       _________________________________________________________
      |   class App extends React.Component {                   | 
      |      render() {                                         |
      |         return (                                        |
      |            <Router>                                     |   
      |               <div>                                     | 
      |                  <nav>                                  |________________
      |                     <ul>                                                 | 
      |                        <li><Link to="/">Home</Link></li>                 |
      |                        <li><Link to="/list">List Expenses</Link>lt;/li>  |
      |                        <li><Link to="/add">Add Expense</Link></li>     __|
      |                     </ul>                                             |
      |                  </nav>                                               |
      |                  <Switch>                                             |
      |                     <Route path="/list">                              | 
      |                        <div style={   { padding: "10px 0px" }   }>    |
      |                           <ExpenseEntryItemList />                    |
      |                        </div>                                         | 
      |                     </Route>                                          |
      |                     <Route path="/add">                               |
      |                        <div style={   { padding: "10px 0px" }   }>    |
      |                           <ExpenseEntryItemForm />                    | 
      |                        </div>                       __________________| 
      |                     </Route>                       |
      |                     <Route path="/">               | 
      |                           <div>                    |
      |                        <Home />                    | 
      |                        </div>                      |
      |                     </Route>                       |
      |                  </Switch>                         |
      |               </div>                               | 
      |            </Router>                               |
      |         );                                         | 
      |      }                                             |
      |   }                                                |
      |____________________________________________________|
  
    * The complete source code of the App component is given below −
    _______________________________________
   |  import React from "react";           | 
   |  import {                             |
   |     BrowserRouter as Router,          |  
   |     Link,                             | 
   |     Switch,                           |
   |     Route                             |
   |  } from 'react-router-dom';           | 
   |                                       | 
   |  import './App.css';                  |_________________________
   |  import Home from './Home';                                     |
   |  import ExpenseEntryItemList from './ExpenseEntryItemList';     | 
   |  import ExpenseEntryItemForm from './ExpenseEntryItemForm';     |
   |                                                                 |
   |  class App extends React.Component {                         ___|
   |     render() {                                              |
   |        return (                                             |
   |           <Router>                                          |
   |              <div>                                          |
   |                 <nav>                                       |              
   |                    <ul>                                     |__________
   |                       <li><Link to="/">Home</Link></li>                |
   |                       <li><Link to="/list">List Expenses</Link></li>   |
   |                       <li><Link to="/add">Add Expense</Link></li>     _|
   |                    </ul>                                             |
   |                 </nav>                                               |
   |                                                                      |
   |                 <Switch>                                             |
   |                    <Route path="/list">                              |
   |                       <div style={{ padding: "10px 0px" }}>          | 
   |                          <ExpenseEntryItemList />                    |
   |                       </div>                                         |
   |                    </Route>                                          |
   |                    <Route path="/add">                               | 
   |                       <div style={{ padding: "10px 0px" }}>          |  
   |                          <ExpenseEntryItemForm />                    | 
   |                       </div>                                         |
   |                    </Route>                                          |
   |                    <Route path="/">                                  |
   |                       <div>                                          |
   |                          <Home />                                    | 
   |                       </div>                                         | 
   |                    </Route>                                          |
   |                 </Switch>                                            |
   |              </div>                                                  |
   |           </Router>                                                  |
   |        );                                                            |
   |     }                                                                |
   |  }                                                                   | 
   |  export default App;                                                 |
   |______________________________________________________________________|
 
   * Next, serve the application using npm command :
         ________________
        |  npm start     |
        |________________|  
  
     * Next, open the browser and enter "http://localhost:3000" in the 
       address bar and press enter :
      ________________________________________________________
     |                                                        |
     |   Home      List Expenses       Add Expense            |
     |''''''''''''''''''''''''''''''''''''''''''''''''''''''''|
     | * *                                                    |
     | ***ome                                                 | 
     | * *                                                    |
     |________________________________________________________|
__________________________________________________
     Install necessary modules                    |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Install necessary modules
                                                                                        
2) Definition of Install necessary modules ?
--------------------------------------------
*
 
3) What is Install necessary modules About ?
--------------------------------------------
*
*

4) What does Install necessary modules Do ?
-------------------------------------------
*
*

5) Advantages/Benefits of Install necessary modules :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of Install necessary modules :
--------------------------------------------------------
*
*
*  

7) Examples of Install necessary modules :
------------------------------------------
*
*
__________________________________________________________________________________

   3)  <<<<<<<<< State management >>>>>>>>>

    We are going to do below action to manage our "redux store" :

        * Fetching the expenses from server through async fetch api and 
          set it in "Redux store".
        * Add new expense to the server through async fetch programming
          and set add the new expense in the "Redux store". 
        * Delete existing expense from the server through async fetch api and 
          update the "Redux store".

    Let us create action types, action creator, actions and reducers for 
    managing the Redux state :
    
   * Create a folder actions under src folder ,
   * Next, create a file, "types.js" to create action types :
       _______________________________________________________________________
      |  export const LIST_EXPENSE_STARTED = 'LIST_EXPENSE_STARTED';          |
      |  export const LIST_EXPENSE_SUCCESS = 'LIST_EXPENSE_SUCCESS';          | 
      |  export const LIST_EXPENSE_FAILURE = 'LIST_EXPENSE_FAILURE';          |
      |                                                                       |  
      |  export const ADD_EXPENSE_STARTED = 'ADD_EXPENSE_STARTED';            |
      |  export const ADD_EXPENSE_SUCCESS = 'ADD_EXPENSE_SUCCESS';            |
      |  export const ADD_EXPENSE_FAILURE = 'ADD_EXPENSE_FAILURE';            |
      |                                                                       |
      |  export const DELETE_EXPENSE_STARTED = 'DELETE_EXPENSE_STARTED';      |
      |  export const DELETE_EXPENSE_SUCCESS = 'DELETE_EXPENSE_SUCCESS';      |
      |  export const DELETE_EXPENSE_FAILURE = 'DELETE_EXPENSE_FAILURE';      |
      |_______________________________________________________________________| 
 
  * Next, create a file, "index.js" under actions folder to create action 
    creators :
  ______________________________________________________________________________
 |  import {                                                                    |
 |     LIST_EXPENSE_STARTED, LIST_EXPENSE_SUCCESS, LIST_EXPENSE_FAILURE,        | 
 |     ADD_EXPENSE_STARTED, ADD_EXPENSE_SUCCESS, ADD_EXPENSE_FAILURE,           |
 |     DELETE_EXPENSE_STARTED, DELETE_EXPENSE_SUCCESS, DELETE_EXPENSE_FAILURE,  | 
 |  } from "./types";                                     ______________________| 
 |  export const getExpenseListStarted = () => {         |
 |     return {                                          |
 |        type: LIST_EXPENSE_STARTED                     |
 |     }                                                 |
 |  }                                                    | 
 |  export const getExpenseListSuccess = data => {       |
 |     return {                                          |
 |        type: LIST_EXPENSE_SUCCESS,                    |
 |        payload: {                                     |
 |           data                                        |
 |        }                                              |
 |     }                                                 |
 |  }                                                    |  
 |  export const getExpenseListFailure = error => {      |
 |     return {                                    ______|
 |        type: LIST_EXPENSE_FAILURE,             |
 |        payload: {                              |  
 |           error                                |
 |        }                                       | 
 |     }                                          |
 |  }                                             |
 |  export const addExpenseStarted = () => {      |
 |     return {                                   |
 |        type: ADD_EXPENSE_STARTED               | 
 |     }                                          |
 |  }                                             |
 |  export const addExpenseSuccess = data => {    |
 |     return {                                   |
 |        type: ADD_EXPENSE_SUCCESS,              | 
 |        payload: {                              |
 |           data                                 |
 |        }                                       | 
 |     }                                          |
 |  }                                             |
 |  export const addExpenseFailure = error => {   |
 |     return {                                   | 
 |        type: ADD_EXPENSE_FAILURE,              |
 |        payload: {                              |
 |           error                                | 
 |        }                                       |______________           
 |     }                                                         |
 |  }                                                            |
 |  export const deleteExpenseStarted = () => {                  |
 |     return {                                                  |
 |        type: DELETE_EXPENSE_STARTED                           |
 |     }                                                         |
 |  }                                                            |
 |  export const deleteExpenseSuccess = data => {                | 
 |     return {                                                  |
 |        type: DELETE_EXPENSE_SUCCESS,                          | 
 |        payload: {                                             |
 |           data                                                |
 |        }                                                      |
 |     }                                                         |
 |  }                                                            |
 |  export const deleteExpenseFailure = error => {               |
 |     return {                                                  |
 |        type: DELETE_EXPENSE_FAILURE,                          |
 |        payload: {                                             |
 |           error                                               |
 |        }                                                      |
 |     }                                                         |
 |  }                                                            |
 |_______________________________________________________________| 
   
  * Here, we created one action creator for every possible outcome 
    (success, failure and error) of fetch api.
  * Since we are going to use three web api calls and each call will have three
    possible outcomes, we use 9 action creators.
  * Next, create a file, expenseActions.js under actions folder and create 
    three functions to fetch, add and delete expenses and to dispatch state
    changes. 
 _____________________________________________________________________________
|  import {                                                                   |
|     getExpenseListStarted, getExpenseListSuccess, getExpenseListFailure,    |
|     addExpenseStarted, addExpenseSuccess, addExpenseFailure,                |
|     deleteExpenseStarted, deleteExpenseSuccess, deleteExpenseFailure        |    
|  } from "./index";                                                          |
|  export const getExpenseList = () => async dispatch => {                    | 
|     dispatch(getExpenseListStarted());                                      |
|     try {                                                                   | 
|        const res = await fetch('http://localhost:8000/api/expenses');       | 
|        const data = await res.json();                         ______________|
|        var items = [];                                       | 
|        data.forEach((item) => {                              | 
|           let newItem = {                                    |
|              id: item._id,                                   |
|              name: item.name,                                |
|              amount: item.amount,                            | 
|              spendDate: item.spend_date,                     |
|              category: item.category                         |
|           }                                                  |
|           items.push(newItem)                                |
|        });                                                   |
|        dispatch(getExpenseListSuccess(items));               |
|     } catch (err) {                                          |
|        dispatch(getExpenseListFailure(err.message));         |          
|     }                                                        |
|  }                                                           |
|  export const addExpense = (data) => async dispatch => {     | 
|     dispatch(addExpenseStarted());                           |
|                                                              |
|     let newItem = {                                          |
|        name: data.name,                                      |
|        amount: data.amount,                                  |
|        spend_date: data.spendDate,                           |
|        category: data.category                               |
|     }                                                        |___________
|     console.log(newItem);                                                |
|     try {                                                                |
|        const res = await fetch('http://localhost:8000/api/expense', {    |
|           method: 'POST',                                                | 
|           body: JSON.stringify(newItem),                                 |
|           headers: {                                                     |
|              "Content-type": "application/json; charset=UTF-8"           |
|           }                                                   ___________|
|        });                                                   |
|        const data = await res.json();                        | 
|        newItem.id = data._id;                                |
|        dispatch(addExpenseSuccess(newItem));                 |
|     } catch (err) {                                          |
|        console.log(err);                                     | 
|        dispatch(addExpenseFailure(err.message));             | 
|     }                                                        | 
|  }                                                           |
|  export const deleteExpense = (id) => async dispatch => {    |
|     dispatch(deleteExpenseStarted());                        |_________________
|     try {                                                                      |
|         const res = await fetch('http://localhost:8000/api/expense/' + id, {   | 
|            method: 'DELETE'                                 ___________________|
|         });                                                |
|         const data = await res.json();                     |
|         dispatch(deleteExpenseSuccess(id));                | 
|     } catch (err) {                                        |
|        dispatch(deleteExpenseFailure(err.message));        |
|     }                                                      |
|  }                                                         |
|____________________________________________________________|
   
    Here,
     * Used "async fetch api" to do 'web api calls'. 
     * Used dispatch function to dispatch proper action during success, 
       failure and error events.
    
  * Create a folder, reducers under src folder and create a file, 
    "index.js" under "reducers" folder to create 'Redux reducers' :
 ____________________________________________________________________________
| import {                                                                   |
|    LIST_EXPENSE_STARTED, LIST_EXPENSE_SUCCESS, LIST_EXPENSE_FAILURE,       | 
|    ADD_EXPENSE_STARTED, ADD_EXPENSE_SUCCESS, ADD_EXPENSE_FAILURE,          | 
|    DELETE_EXPENSE_STARTED, DELETE_EXPENSE_SUCCESS, DELETE_EXPENSE_FAILURE  |   
| } from "../actions/types";                                                 | 
|                                                                            |
| // define initial state of user                                            |
| const initialState = {                                                     |
|    data: null,                                                             | 
|    loading: false,                                                         |
|    error: null                                                             |
| }                                                                          | 
| export default function expenseReducer(state = initialState, action) {     |
|    switch (action.type) {                           _______________________|  
|       case LIST_EXPENSE_STARTED:                   |
|          return {                                  |
|             ...state,                              |
|             loading: true                          |
|          }                                         |
|       case LIST_EXPENSE_SUCCESS:                   |
|          const { data } = action.payload;          |
|          return {                                  |
|             ...state,                              |
|             data,                                  |
|             loading: false                         |
|          }                                         | 
|       case LIST_EXPENSE_FAILURE:                   | 
|         const { error } = action.payload;          |   
|          return {                                  |
|             ...state,                              | 
|             error                                  |
|          }                                         |
|       case ADD_EXPENSE_STARTED:                    | 
|          return {                                  |
|             ...state,                              |
|             loading: true                          | 
|          }                                         |
|       case ADD_EXPENSE_SUCCESS:                    |
|          return {                                  |
|             ...state,                              |
|             loading: false                         | 
|          }                                         |
|       case ADD_EXPENSE_FAILURE:                    | 
|          const { expenseError } = action.payload;  |
|          return {                                  |
|             ...state,                              |
|             expenseError                           |
|          }                                         |
|       case DELETE_EXPENSE_STARTED:                 |
|          return {                                  |
|             ...state,                              |
|             loading: true                          | 
|          }                                         |
|       case DELETE_EXPENSE_SUCCESS:                 |
|          return {                                  |_________________________________   
|             ...state,                                                                |
|             data: state.data.filter(expense => expense.id == action.payload.data),   | 
|             loading: false                                ___________________________|
|          }                                                | 
|       case DELETE_EXPENSE_FAILURE:                        |
|          const { deleteError } = action.payload;          |
|          return {                                         |  
|             ...state,                                     | 
|             deleteError                                   |
|          }                                                |
|       default:                                            | 
|          return state                                     |
|    }                                                      | 
| }                                                         | 
|___________________________________________________________|
   
   * Here, we have 'updated' the "redux store state" for 'each action type'. 
   * Next, open index.js file under src folder and include Provider component
     so that all the components can connect and work with the "redux store" :
     ______________________________________________________________________
    |  import React from 'react';                                          |
    |  import ReactDOM from 'react-dom';                                   | 
    |  import { createStore, applyMiddleware } from 'redux';               |  
    |  import thunk from 'redux-thunk';                                    |
    |  import { Provider } from 'react-redux';                             |
    |  import rootReducer from './reducers';                               |
    |  import App from './components/App';                                 |
    |                                                                      |
    |  const store = createStore(rootReducer, applyMiddleware(thunk));     | 
    |                                                                      |
    |  ReactDOM.render(                                                    | 
    |     <Provider store={store}>                                         |
    |        <App />                                                       |
    |     </Provider>,                                                     |
    |     document.getElementById('root')                                  |
    |  );                                                                  |
    |______________________________________________________________________|  
       
     Here,
          * Imported createStore and applyMiddleware.
          * Imported thunk from redux-thunk library (for async fetch api).
          * Imported Provider from redux library. 
          * Created newstore using createStore by configuring reducer
            and thunk middleware.
          * Attached the Provider component as top level component with
            Redux store. 
__________________________________________________
    State management                              |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* State management                                                                                        
2) Definition of State management ?
-----------------------------------
*
 
3) What is State management About ?
-----------------------------------
*
*

4) What does State management Do ?
----------------------------------
*
*

5) Advantages/Benefits of State management :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of State management :
-----------------------------------------------
*
*
*  

7) Examples of State management :
---------------------------------
*
*
__________________________________________________________________________________

   4)  <<<<<<<<< List expenses >>>>>>>>>
        
  *  Open "ExpenseEntryItemList.js" and import connect from redux library :
       _______________________________________________
      |  import { connect } from 'react-redux';       |
      |_______________________________________________|
  
  *  Next, import "addExpenseList" and "deleteExpense" actions :
 _______________________________________________________________________________
| import { getExpenseList, deleteExpense } from '../actions/expenseActions';    |
|_______________________________________________________________________________|
   
     * Next, add constructor with props : 
   ____________________________
  |  constructor(props) {      |   
  |     super(props);          |    
  |  }                         |
  |____________________________|
     
     * Next, call "getExpenseList" in "componentDidMount()" life cycle : 
         _____________________________________
        |  componentDidMount() {              |
        |     this.props.getExpenseList();    |
        |  }                                  |
        |_____________________________________| 
     
    * Next, write a method to handle the remove expense option :
             ______________________________________
            |  handleDelete = (id,e) => {          |
            |     e.preventDefault();              |
            |     this.props.deleteExpense(id);    |     
            |  }                                   |
            |______________________________________| 
    
  * Now, let us write a function, getTotal to calculate the total expenses : 
     _____________________________________________________________________
    |  getTotal() {                                                       |
    |     let total = 0;                                                  |
    |     if (this.props.expenses != null) {                              |
    |        for (var i = 0; i < this.props.expenses.length; i++) {       |
    |           total += this.props.expenses[i].amount                    | 
    |        }                                                            |
    |     }                                                               |
    |     return total;                                                   |
    |  }                                                                  |
    |_____________________________________________________________________|
  
   * Next, update the render method and list the expense items :
 _________________________________________________________________________________
|  render() {
|     let lists = [];
|
|     if (this.props.expenses != null) {
|        lists = this.props.expenses.map((item) =>
|           <tr key={item.id}>
|              <td>{item.name}</td>
|              <td>{item.amount}</td>
|              <td>{new Date(item.spendDate).toDateString()}</td>
|              <td>{item.category}</td>
|              <td><a href="#"
|                 onClick={(e) => this.handleDelete(item.id, e)}>Remove</a></td>
|           </tr>
|        );
|     }
|     return (
|        <div>
|           <table>
|              <thead>
|                 <tr>
|                    <th>Item</th>
|                    <th>Amount</th>
|                    <th>Date</th>
|                    <th>Category</th>
|                    <th>Remove</th>
|                 </tr>
|              </thead>
|              <tbody>
|                 {lists}
|                 <tr>
|                    <td colSpan="1" style={{ textAlign: "right" }}>Total Amount</td>
|                    <td colSpan="4" style={{ textAlign: "left" }}>
|                       {this.getTotal()}
|                    </td>
|                 </tr>
|              </tbody>
|           </table>
|        </div>
|     );
|  }
|_________________________________________________________________________________________ 

   * Next, write "mapStateToProps" and "mapDispatchToProps" method : 
       ____________________________________________________
      |  const mapStateToProps = state => {
      |     return {      
      |        expenses: state.data
      |     };
      |  };
      |  const mapDispatchToProps = {
      |     getExpenseList,
      |     deleteExpense
      |  };
      |____________________________________________________ 
    
  = Here, we have mapped the expenses item from 'redux store' to "expenses" 
    property and attach distpatcher, "getExpenseList" and "deleteExpense"
    to component properties.
   
   * Finally, connect component to Redux store using connect api :
        ____________________________________
       |  export default connect(           | 
       |     mapStateToProps,               |
       |     mapDispatchToProps             | 
       |  )(ExpenseEntryItemList);          | 
       |____________________________________|
     
    * The complete source code of the application is given below − 
 _____________________________________________________________________________________
| import React from "react";
| import { connect } from 'react-redux';
| import { getExpenseList, deleteExpense } from '../actions/expenseActions';
|
| class ExpenseEntryItemList extends React.Component {
|    constructor(props) {
|        super(props);
|    }
|    componentDidMount() {
|       this.props.getExpenseList();
|    }
|    handleDelete = (id, e) => {
|       e.preventDefault();
|       this.props.deleteExpense(id);
|    }
|    getTotal() {
|       let total = 0;
|       if (this.props.expenses != null) {
|          for (var i = 0; i < this.props.expenses.length; i++) {
|             total += this.props.expenses[i].amount
|          }
|       }
|       return total;
|   }
|   render() {
|      let lists = [];
|      if (this.props.expenses != null) {
|         lists = this.props.expenses.map((item) =>
|            <tr key={item.id}>
|               <td>{item.name}</td>
|               <td>{item.amount}</td>
|               <td>{new Date(item.spendDate).toDateString()}</td>
|               <td>{item.category}</td>
|               <td><a href="#"
|                  onClick={(e) => this.handleDelete(item.id, e)}>Remove</a>
|               </td>
|            </tr>
|         );
|      }
|      return (
|         <div>
|            <table>
|               <thead>
|                  <tr>
|                     <th>Item</th>
|                     <th>Amount</th>
|                     <th>Date</th>
|                     <th>Category</th>
|                     <th>Remove</th>
|                  </tr>
|               </thead>
|               <tbody>
|                  {lists}
|                  <tr>
|                     <td colSpan="1" style={{ textAlign: "right" }}>Total Amount</td>
|                     <td colSpan="4" style={{ textAlign: "left" }}>
|                        {this.getTotal()}
|                     </td>
|                  </tr>
|               </tbody>
|            </table>
|         </div>
|      );
|   }
| }
| const mapStateToProps = state => {
|    return {
|       expenses: state.data
|   };
| };
| const mapDispatchToProps = {
|    getExpenseList,
|    deleteExpense
| };
| export default connect(
|    mapStateToProps,
|    mapDispatchToProps
| )(ExpenseEntryItemList);
|___________________________________________________________________________________________
  
        * Next, serve the application using npm command :
           __________________
          |  npm start       |
          |__________________|
      
    * Next, open the browser and enter http://localhost:3000 in the
      address bar and press enter :
     _________________________________________________________________
    |   Home        List Expenses      Add Expense                    |
    |`````````````````````````````````````````````````````````````````|
    |_________________________________________________________________|
    |                                                                 |
    | "  "                                                            |
    | """"ome                                                         | 
    | "  "                                                            |
    |                                                                 |
    |                                                                 | 
    |                                                                 | 
    |                                                                 |
    |                                                                 |
    |                                                                 |
    |                                                                 |
    |                                                                 |  
    |_________________________________________________________________| 
__________________________________________________
    List expenses                                 |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* List expenses
                                                                                        
2) Definition of List expenses ?
--------------------------------
*
 
3) What is List expenses About ?
--------------------------------
*
*

4) What does List expenses Do ?
-------------------------------
*
*

5) Advantages/Benefits of List expenses :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of List expenses :
--------------------------------------------
*
*
*  

7) Examples of List expenses :
------------------------------
*
*
__________________________________________________________________________________

    5)  <<<<<<<<<  Add expense  >>>>>>>>>
        
   * Open "ExpenseEntryItemList.js" and import connect from redux library :
       _____________________________________________
      |  import { connect } from 'react-redux';     |
      |_____________________________________________|
   
   * Next, import Formik library.. 
      _______________________________________
     |  iimport { Formik } from 'formik';    |
     |_______________________________________|
   
   * Next, import withRouter method from router library :
        _______________________________________________________________
       |   import { addExpense } from '../actions/expenseActions';     |
       |_______________________________________________________________|
   
   * Next, create constructor with initial values for expenses :
 ____________________________________________________________________________________
|  constructor(props) {                                                              |
|     super(props);                                                                  |
|     this.initialValues = { name: '', amount: '', spend_date: '', category: '' }    | 
|  }                                                                                 |
|____________________________________________________________________________________|
    
      * Next, write the validate method ,
          ______________________________________________
         |  validate = (values) => {                    | 
         |     const errors = {};                       | 
         |     if (!values.name) {                      |
         |        errors.name = 'Required';             |  
         |  }                                           |
         |  if (!values.amount) {                       | 
         |     errors.amount = 'Required';              |
         |  }                                           | 
         |  if (!values.spend_date) {                   |
         |     errors.spend_date = 'Required';          | 
         |  }                                           |
         |  if (!values.category) {                     |
         |     errors.category = 'Required';            |
         |  }                                           |
         |  return errors;                              |
         |  }                                           |
         |______________________________________________|
    
       * Next, add event handler method , 
      ___________________________________________________
     |  handleSubmit = (values, setSubmitting) =< {      |    
     |     setTimeout(() =< {                            |
     |       let newItem = {                             | 
     |          name: values.name,                       |
     |          amount: values.amount,                   |
     |          spendDate: values.spend_date,            |
     |          category: values.category                |
     |       }                                           |
     |       this.props.addExpense(newItem);             |
     |       setSubmitting(false);                       |
     |       this.props.history.push("/list");           |    
     |     }, 400);                                      |
     |  }                                                |
     |___________________________________________________|
   
       Here,   
            * Used addExpense method to add expense item
            * Use router history method to move to expense list page.

   * Next, update render method with form created using Formik library :
 _______________________________________________________________________________________________________________________________________________________
|  render() {
|     return (
|        <div id="expenseForm">
|           <Formik
|              initialValues={this.initialValues}
|              validate={values => this.validate(values)}
|              onSubmit={(values, { setSubmitting }) => this.handleSubmit(values, setSubmitting)}>
|              {
|                 ({
|                    values,
|                    errors,
|                    touched,
|                    handleChange,
|                    handleBlur,
|                    handleSubmit,
|                    isSubmitting,
|                    /* and other goodies */
|                 }) => (
|                    <form onSubmit={handleSubmit}>
|                       <label for="name">Title <span>{errors.name && touched.name && errors.name}</span></label>
|                       <input type="text" id="name" name="name" placeholder="Enter expense title"
|                          onChange={handleChange}
|                          onBlur={handleBlur}
|                          value={values.name} />
|
|                       <label for="amount">Amount <span>{errors.amount && touched.amount && errors.amount}</span></label>
|                       <input type="number" id="amount" name="amount" placeholder="Enter expense amount"
|                          onChange={handleChange}
|                          onBlur={handleBlur}
|                          value={values.amount} />
|
|                       <label for="spend_date">Spend Date <span>{errors.spend_date && touched.spend_date && errors.spend_date}</span></label>
|                       <input type="date" id="spend_date" name="spend_date" placeholder="Enter date"
|                          onChange={handleChange}
|                          onBlur={handleBlur}
|                          value={values.spend_date} />
|
|                       <label for="category">Category <span>{errors.category && touched.category && errors.category}</span></label>
|                       <select id="category" name="category"
|                          onChange={handleChange}
|                          onBlur={handleBlur}
|                          value={values.category}>
|                          <option value="">Select</option>
|                          <option value="Food">Food</option>
|                          <option value="Entertainment">Entertainment</option>
|                          <option value="Academic">Academic</option>
|                       </select>
|                       <input type="submit" value="Submit" disabled={isSubmitting} />
|                    </form>
|                 )
|              }
|           </Formik>
|        </div>
|     )
|  }
|___________________________________________________________________________________________________________________________________________________________________

   * Next, map dispatch method to component properties :
        _____________________________________
       |  const mapDispatchToProps = {       |
       |     addExpense,                     |
       |  };                                 |
       |_____________________________________|
   
    * The complete source code of the component is as follows −
 _________________________________________________________________
|  import React from "react";                                     |        
|                                                                 |
|  import { connect } from 'react-redux';                         | 
|  import { Formik } from 'formik';                               |
|  import { withRouter } from "react-router-dom";                 |
|  import { addExpense } from '../actions/expenseActions';        |  
|                                                                 |
|  class ExpenseEntryItemForm extends React.Component {           |    
|     constructor(props) {                                        |
|        super(props);                                            |____________________________ 
|
|        this.initialValues = { name: '', amount: '', spend_date: '', category: '' }
|     }
|     validate = (values) => {
|        const errors = {};
|        if (!values.name) {
|           errors.name = 'Required';
|        }
|        if (!values.amount) {
|           errors.amount = 'Required';
|        }
|        if (!values.spend_date) {
|           errors.spend_date = 'Required';
|        }
|        if (!values.category) {
|           errors.category = 'Required';
|        }
|        return errors;
|     }
|     handleSubmit = (values, setSubmitting) => {
|        setTimeout(() => {
|           let newItem = {
|              name: values.name,
|              amount: values.amount,
|              spendDate: values.spend_date,
|              category: values.category
|           }
|           this.props.addExpense(newItem);
|           setSubmitting(false);
|           this.props.history.push("/list");
|        }, 400);
|     }
|     render() {
|        return (
|           <div id="expenseForm">
|              <Formik
|                 initialValues={this.initialValues}
|                 validate={values => this.validate(values)}
|                 onSubmit={(values, { setSubmitting }) => this.handleSubmit(values, setSubmitting)}>
|                 {
|                    ({
|                       values,
|                       errors,
|                       touched,
|                       handleChange,
|                       handleBlur,
|                       handleSubmit,
|                       isSubmitting,
|                       /* and other goodies */
|                    }) => (
|                       <form onSubmit={handleSubmit}>
|                          <label for="name">Title <span>{errors.name && touched.name && errors.name}</span></label>
|                          <input type="text" id="name" name="name" placeholder="Enter expense title"
|                             onChange={handleChange}
|                             onBlur={handleBlur}
|                             value={values.name} />
|
|                          <label for="amount">Amount <span>{errors.amount && touched.amount && errors.amount}</span></label>
|                          <input type="number" id="amount" name="amount" placeholder="Enter expense amount"
|                             onChange={handleChange}
|                             onBlur={handleBlur}
|                             value={values.amount} />
|
|                          <label for="spend_date">Spend Date <span>{errors.spend_date && touched.spend_date && errors.spend_date}</span></label>
|                          <input type="date" id="spend_date" name="spend_date" placeholder="Enter date"
|                             onChange={handleChange}
|                             onBlur={handleBlur}
|                             value={values.spend_date} />
|
|                          <label for="category">Category <span>{errors.category && touched.category && errors.category}</span></label>
|                          <select id="category" name="category"
|                             onChange={handleChange}                                                                                                          
|                             onBlur={handleBlur}                                                                                                              
|                             value={values.category}>                                                                                                         
|                             <option value="">Select</option>                                                                                                 
|                             <option value="Food">Food</option>                                                                                               
|                             <option value="Entertainment">Entertainment</option>                                                                             
|                             <option value="Academic">Academic</option>                                                                                       
|                          </select>                                                                                                                            
|                          <input type="submit" value="Submit" disabled={isSubmitting} />                                                                      
|                       </form>                                                                                                                                
|                    )                                        _________________________________________________________________________________________________
|                 }                                          |
|              </Formik>                                     |
|           </div>                                           |
|        )                                                   |
|     }                                                      |
|  }                                                         |
|  const mapDispatchToProps = {                              |
|     addExpense,                                            |
|  };                                                        |
|  export default withRouter(connect(                        |
|     null,                                                  |
|     mapDispatchToProps                                     |
|  )(ExpenseEntryItemForm));                                 |
|____________________________________________________________| 
   
   * Next, serve the application using npm command :
       _________________
      |  npm start      |
      |_________________|
  
    * Next, open the browser and enter "http://localhost:3000" in the address
      bar and press enter.
       _____________________________________________________________________
      |  Home        List Expenses       Add Expense                        |
      |`````````````````````````````````````````````````````````````````````| 
      |_____________________________________________________________________|
      | " "                                                                 |
      | """ome                                                              |
      | " "                                                                 |
      |                                                                     |
      |                                                                     |
      |                                                                     |
      |                                                                     |
      |                                                                     | 
      |                                                                     |
      |                                                                     |
      |                                                                     |
      |                                                                     |
      |                                                                     |
      |_____________________________________________________________________|
  
   * Finally, we have successfully created a simple react application with
     basic features. 

         CONCLUSION :
         `````````````
   *  React is one of the most popular and highly recommended UI frameworks.
      True to its popularity, it is being developed for a very long time and
      actively maintained.

   * Learning react framework is a good starting point for the front end 
     developers and will surely help them to improve their professional 
     career. 

__________________________________________________
     Add expense                                  |
                                                  |                   
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* Add expense
                                                                                        
2) Definition of Add expense ?
------------------------------
*
 
3) What is Add expense About ?
------------------------------
*
*

4) What does Add expense Do ?
-----------------------------
*
*

5) Advantages/Benefits of Add expense :
---------------------------------------
*
*
*

6) Disadvantages/Drawback of Add expense :
------------------------------------------
*
*
*  

7) Examples of Add expense :
----------------------------
*
*
__________________________________________________________________________________

